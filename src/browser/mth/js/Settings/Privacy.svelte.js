/* src\browser\mth\$svelte\src\Settings\Privacy.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	attr_dev,
	bind,
	binding_callbacks,
	component_subscribe,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	mount_component,
	safe_not_equal,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots,
	validate_store
} from "mth://.svelte/internal";

import {
	ListItem,
	TextBlock,
	ContentDialog,
	Button,
	ToggleSwitch
} from "mth://js/fluent-svelte/index.js";

import { getContext } from "mth://.svelte/internal";
import noFirstTime from "mth://js/nft.js";
import DataClearer from "./dialogs/DataClearer.svelte";
const file = "src\\browser\\mth\\$svelte\\src\\Settings\\Privacy.svelte";

// (46:0) <ContentDialog size="max" append={document.body} bind:open={siteSettingsDialog} closable={false}>
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Not implemented.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(46:0) <ContentDialog size=\\\"max\\\" append={document.body} bind:open={siteSettingsDialog} closable={false}>",
		ctx
	});

	return block;
}

// (49:4) <Button on:click={() => {siteSettingsDialog = false; location.hash = ''}}>
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Done");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(49:4) <Button on:click={() => {siteSettingsDialog = false; location.hash = ''}}>",
		ctx
	});

	return block;
}

// (48:2) <svelte:fragment slot="footer">
function create_footer_slot(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(48:2) <svelte:fragment slot=\\\"footer\\\">",
		ctx
	});

	return block;
}

// (55:2) <TextBlock variant="body">
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Clear your data...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(55:2) <TextBlock variant=\\\"body\\\">",
		ctx
	});

	return block;
}

// (56:2) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Clear history, cookies, and other data...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(56:2) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (54:0) <ListItem on:click={() => clearDialog = true} style="block-size: 57px;">
function create_default_slot_10(ctx) {
	let textblock0;
	let br;
	let t;
	let textblock1;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "body",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(textblock0.$$.fragment);
			br = element("br");
			t = space();
			create_component(textblock1.$$.fragment);
			add_location(br, file, 54, 58, 1853);
		},
		m: function mount(target, anchor) {
			mount_component(textblock0, target, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t, anchor);
			mount_component(textblock1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const textblock1_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock0, detaching);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t);
			destroy_component(textblock1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(54:0) <ListItem on:click={() => clearDialog = true} style=\\\"block-size: 57px;\\\">",
		ctx
	});

	return block;
}

// (61:2) <TextBlock variant="body">
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Manage site settings...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(61:2) <TextBlock variant=\\\"body\\\">",
		ctx
	});

	return block;
}

// (62:2) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Permissions, local storage, cookies");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(62:2) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (60:0) <ListItem on:click={() => {siteSettingsDialog = true; location.hash = '#siteSettings'}} style="block-size: 57px;">
function create_default_slot_7(ctx) {
	let textblock0;
	let br;
	let t;
	let textblock1;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "body",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(textblock0.$$.fragment);
			br = element("br");
			t = space();
			create_component(textblock1.$$.fragment);
			add_location(br, file, 60, 63, 2191);
		},
		m: function mount(target, anchor) {
			mount_component(textblock0, target, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t, anchor);
			mount_component(textblock1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const textblock1_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock0, detaching);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t);
			destroy_component(textblock1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(60:0) <ListItem on:click={() => {siteSettingsDialog = true; location.hash = '#siteSettings'}} style=\\\"block-size: 57px;\\\">",
		ctx
	});

	return block;
}

// (67:4) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Sites embedded in other sites won't be able to request permissions");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(67:4) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (65:2) <TextBlock>
function create_default_slot_5(ctx) {
	let t0;
	let br;
	let t1;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text("Deny cross-origin permissions ");
			br = element("br");
			t1 = space();
			create_component(textblock.$$.fragment);
			add_location(br, file, 65, 34, 2384);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(65:2) <TextBlock>",
		ctx
	});

	return block;
}

// (78:4) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("That will send requests to its server each time you're typing in the search bar.\r\n      Requests will not be sent in private mode.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(78:4) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (76:2) <TextBlock>
function create_default_slot_3(ctx) {
	let t0;
	let br;
	let t1;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text("Use the default search engine hinting service ");
			br = element("br");
			t1 = space();
			create_component(textblock.$$.fragment);
			add_location(br, file, 76, 50, 2735);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(76:2) <TextBlock>",
		ctx
	});

	return block;
}

// (88:4) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Hiding your session prevents some tracking, but can make hints less personalized.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(88:4) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (86:2) <TextBlock>
function create_default_slot_1(ctx) {
	let t0;
	let br;
	let t1;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text("Hide your session while getting hints ");
			br = element("br");
			t1 = space();
			create_component(textblock.$$.fragment);
			add_location(br, file, 86, 42, 3111);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(86:2) <TextBlock>",
		ctx
	});

	return block;
}

// (96:2) <TextBlock>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Only use secure connections (HTTPS)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(96:2) <TextBlock>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let dataclearer;
	let updating_open;
	let t0;
	let contentdialog;
	let updating_open_1;
	let t1;
	let listitem0;
	let t2;
	let div0;
	let t3;
	let listitem1;
	let t4;
	let div1;
	let textblock0;
	let t5;
	let toggleswitch0;
	let updating_checked;
	let t6;
	let div2;
	let t7;
	let div3;
	let textblock1;
	let t8;
	let toggleswitch1;
	let updating_checked_1;
	let t9;
	let div4;
	let textblock2;
	let t10;
	let toggleswitch2;
	let updating_checked_2;
	let t11;
	let div5;
	let t12;
	let div6;
	let textblock3;
	let t13;
	let toggleswitch3;
	let updating_checked_3;
	let current;

	function dataclearer_open_binding(value) {
		/*dataclearer_open_binding*/ ctx[8](value);
	}

	let dataclearer_props = {};

	if (/*clearDialog*/ ctx[4] !== void 0) {
		dataclearer_props.open = /*clearDialog*/ ctx[4];
	}

	dataclearer = new DataClearer({ props: dataclearer_props, $$inline: true });
	binding_callbacks.push(() => bind(dataclearer, 'open', dataclearer_open_binding));

	function contentdialog_open_binding(value) {
		/*contentdialog_open_binding*/ ctx[10](value);
	}

	let contentdialog_props = {
		size: "max",
		append: document.body,
		closable: false,
		$$slots: {
			footer: [create_footer_slot],
			default: [create_default_slot_14]
		},
		$$scope: { ctx }
	};

	if (/*siteSettingsDialog*/ ctx[5] !== void 0) {
		contentdialog_props.open = /*siteSettingsDialog*/ ctx[5];
	}

	contentdialog = new ContentDialog({
			props: contentdialog_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog, 'open', contentdialog_open_binding));

	listitem0 = new ListItem({
			props: {
				style: "block-size: 57px;",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem0.$on("click", /*click_handler_1*/ ctx[11]);

	listitem1 = new ListItem({
			props: {
				style: "block-size: 57px;",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem1.$on("click", /*click_handler_2*/ ctx[12]);

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function toggleswitch0_checked_binding(value) {
		/*toggleswitch0_checked_binding*/ ctx[13](value);
	}

	let toggleswitch0_props = {};

	if (/*noCOPermissions*/ ctx[0] !== void 0) {
		toggleswitch0_props.checked = /*noCOPermissions*/ ctx[0];
	}

	toggleswitch0 = new ToggleSwitch({
			props: toggleswitch0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(toggleswitch0, 'checked', toggleswitch0_checked_binding));

	textblock1 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function toggleswitch1_checked_binding(value) {
		/*toggleswitch1_checked_binding*/ ctx[14](value);
	}

	let toggleswitch1_props = {};

	if (/*useHintingService*/ ctx[1] !== void 0) {
		toggleswitch1_props.checked = /*useHintingService*/ ctx[1];
	}

	toggleswitch1 = new ToggleSwitch({
			props: toggleswitch1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(toggleswitch1, 'checked', toggleswitch1_checked_binding));

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function toggleswitch2_checked_binding(value) {
		/*toggleswitch2_checked_binding*/ ctx[15](value);
	}

	let toggleswitch2_props = {};

	if (/*maskSessionWhenHints*/ ctx[2] !== void 0) {
		toggleswitch2_props.checked = /*maskSessionWhenHints*/ ctx[2];
	}

	toggleswitch2 = new ToggleSwitch({
			props: toggleswitch2_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(toggleswitch2, 'checked', toggleswitch2_checked_binding));

	textblock3 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function toggleswitch3_checked_binding(value) {
		/*toggleswitch3_checked_binding*/ ctx[16](value);
	}

	let toggleswitch3_props = {};

	if (/*useHTTPSOnly*/ ctx[3] !== void 0) {
		toggleswitch3_props.checked = /*useHTTPSOnly*/ ctx[3];
	}

	toggleswitch3 = new ToggleSwitch({
			props: toggleswitch3_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(toggleswitch3, 'checked', toggleswitch3_checked_binding));

	const block = {
		c: function create() {
			create_component(dataclearer.$$.fragment);
			t0 = space();
			create_component(contentdialog.$$.fragment);
			t1 = space();
			create_component(listitem0.$$.fragment);
			t2 = space();
			div0 = element("div");
			t3 = space();
			create_component(listitem1.$$.fragment);
			t4 = space();
			div1 = element("div");
			create_component(textblock0.$$.fragment);
			t5 = space();
			create_component(toggleswitch0.$$.fragment);
			t6 = space();
			div2 = element("div");
			t7 = space();
			div3 = element("div");
			create_component(textblock1.$$.fragment);
			t8 = space();
			create_component(toggleswitch1.$$.fragment);
			t9 = space();
			div4 = element("div");
			create_component(textblock2.$$.fragment);
			t10 = space();
			create_component(toggleswitch2.$$.fragment);
			t11 = space();
			div5 = element("div");
			t12 = space();
			div6 = element("div");
			create_component(textblock3.$$.fragment);
			t13 = space();
			create_component(toggleswitch3.$$.fragment);
			attr_dev(div0, "class", "separator");
			add_location(div0, file, 57, 0, 1979);
			attr_dev(div1, "class", "s-option");
			add_location(div1, file, 63, 0, 2311);
			attr_dev(div2, "class", "separator");
			add_location(div2, file, 72, 0, 2613);
			attr_dev(div3, "class", "s-option");
			add_location(div3, file, 74, 0, 2646);
			attr_dev(div4, "class", "s-option");
			add_location(div4, file, 84, 0, 3030);
			attr_dev(div5, "class", "separator");
			add_location(div5, file, 93, 0, 3360);
			attr_dev(div6, "class", "s-option");
			add_location(div6, file, 94, 0, 3391);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(dataclearer, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(contentdialog, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(listitem0, target, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div0, anchor);
			insert_dev(target, t3, anchor);
			mount_component(listitem1, target, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);
			mount_component(textblock0, div1, null);
			append_dev(div1, t5);
			mount_component(toggleswitch0, div1, null);
			insert_dev(target, t6, anchor);
			insert_dev(target, div2, anchor);
			insert_dev(target, t7, anchor);
			insert_dev(target, div3, anchor);
			mount_component(textblock1, div3, null);
			append_dev(div3, t8);
			mount_component(toggleswitch1, div3, null);
			insert_dev(target, t9, anchor);
			insert_dev(target, div4, anchor);
			mount_component(textblock2, div4, null);
			append_dev(div4, t10);
			mount_component(toggleswitch2, div4, null);
			insert_dev(target, t11, anchor);
			insert_dev(target, div5, anchor);
			insert_dev(target, t12, anchor);
			insert_dev(target, div6, anchor);
			mount_component(textblock3, div6, null);
			append_dev(div6, t13);
			mount_component(toggleswitch3, div6, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const dataclearer_changes = {};

			if (!updating_open && dirty & /*clearDialog*/ 16) {
				updating_open = true;
				dataclearer_changes.open = /*clearDialog*/ ctx[4];
				add_flush_callback(() => updating_open = false);
			}

			dataclearer.$set(dataclearer_changes);
			const contentdialog_changes = {};

			if (dirty & /*$$scope, siteSettingsDialog, location*/ 4194336) {
				contentdialog_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open_1 && dirty & /*siteSettingsDialog*/ 32) {
				updating_open_1 = true;
				contentdialog_changes.open = /*siteSettingsDialog*/ ctx[5];
				add_flush_callback(() => updating_open_1 = false);
			}

			contentdialog.$set(contentdialog_changes);
			const listitem0_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				listitem0_changes.$$scope = { dirty, ctx };
			}

			listitem0.$set(listitem0_changes);
			const listitem1_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				listitem1_changes.$$scope = { dirty, ctx };
			}

			listitem1.$set(listitem1_changes);
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const toggleswitch0_changes = {};

			if (!updating_checked && dirty & /*noCOPermissions*/ 1) {
				updating_checked = true;
				toggleswitch0_changes.checked = /*noCOPermissions*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			toggleswitch0.$set(toggleswitch0_changes);
			const textblock1_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const toggleswitch1_changes = {};

			if (!updating_checked_1 && dirty & /*useHintingService*/ 2) {
				updating_checked_1 = true;
				toggleswitch1_changes.checked = /*useHintingService*/ ctx[1];
				add_flush_callback(() => updating_checked_1 = false);
			}

			toggleswitch1.$set(toggleswitch1_changes);
			const textblock2_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
			const toggleswitch2_changes = {};

			if (!updating_checked_2 && dirty & /*maskSessionWhenHints*/ 4) {
				updating_checked_2 = true;
				toggleswitch2_changes.checked = /*maskSessionWhenHints*/ ctx[2];
				add_flush_callback(() => updating_checked_2 = false);
			}

			toggleswitch2.$set(toggleswitch2_changes);
			const textblock3_changes = {};

			if (dirty & /*$$scope*/ 4194304) {
				textblock3_changes.$$scope = { dirty, ctx };
			}

			textblock3.$set(textblock3_changes);
			const toggleswitch3_changes = {};

			if (!updating_checked_3 && dirty & /*useHTTPSOnly*/ 8) {
				updating_checked_3 = true;
				toggleswitch3_changes.checked = /*useHTTPSOnly*/ ctx[3];
				add_flush_callback(() => updating_checked_3 = false);
			}

			toggleswitch3.$set(toggleswitch3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dataclearer.$$.fragment, local);
			transition_in(contentdialog.$$.fragment, local);
			transition_in(listitem0.$$.fragment, local);
			transition_in(listitem1.$$.fragment, local);
			transition_in(textblock0.$$.fragment, local);
			transition_in(toggleswitch0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(toggleswitch1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(toggleswitch2.$$.fragment, local);
			transition_in(textblock3.$$.fragment, local);
			transition_in(toggleswitch3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dataclearer.$$.fragment, local);
			transition_out(contentdialog.$$.fragment, local);
			transition_out(listitem0.$$.fragment, local);
			transition_out(listitem1.$$.fragment, local);
			transition_out(textblock0.$$.fragment, local);
			transition_out(toggleswitch0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(toggleswitch1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(toggleswitch2.$$.fragment, local);
			transition_out(textblock3.$$.fragment, local);
			transition_out(toggleswitch3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dataclearer, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(contentdialog, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(listitem0, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t3);
			destroy_component(listitem1, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			destroy_component(textblock0);
			destroy_component(toggleswitch0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div3);
			destroy_component(textblock1);
			destroy_component(toggleswitch1);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(div4);
			destroy_component(textblock2);
			destroy_component(toggleswitch2);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(div5);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(div6);
			destroy_component(textblock3);
			destroy_component(toggleswitch3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Privacy', slots, []);
	let config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(17, $config = value));
	let { update } = $$props;
	let clearDialog = false;
	let siteSettingsDialog = location.hash.startsWith('#siteSettings');
	let noCOPermissions = $config.privacy.denyCrossOriginPermissions;

	const updateCOPs = noFirstTime(() => {
		set_store_value(config, $config.privacy.denyCrossOriginPermissions = noCOPermissions, $config);
		update();
	});

	let useHintingService = $config.privacy.useSuggestions;

	const updateHintingService = noFirstTime(() => {
		set_store_value(config, $config.privacy.useSuggestions = useHintingService, $config);
		update();
	});

	let maskSessionWhenHints = $config.privacy.hideSessionForSuggestions;

	const updateMask = noFirstTime(() => {
		set_store_value(config, $config.privacy.hideSessionForSuggestions = maskSessionWhenHints, $config);
		update();
	});

	let useHTTPSOnly = $config.privacy.httpsOnly;

	const updateHTTPSOnly = noFirstTime(() => {
		set_store_value(config, $config.privacy.httpsOnly = useHTTPSOnly, $config);
		update();
	});

	const writable_props = ['update'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Privacy> was created with unknown prop '${key}'`);
	});

	function dataclearer_open_binding(value) {
		clearDialog = value;
		$$invalidate(4, clearDialog);
	}

	const click_handler = () => {
		$$invalidate(5, siteSettingsDialog = false);
		location.hash = '';
	};

	function contentdialog_open_binding(value) {
		siteSettingsDialog = value;
		$$invalidate(5, siteSettingsDialog);
	}

	const click_handler_1 = () => $$invalidate(4, clearDialog = true);

	const click_handler_2 = () => {
		$$invalidate(5, siteSettingsDialog = true);
		location.hash = '#siteSettings';
	};

	function toggleswitch0_checked_binding(value) {
		noCOPermissions = value;
		$$invalidate(0, noCOPermissions);
	}

	function toggleswitch1_checked_binding(value) {
		useHintingService = value;
		$$invalidate(1, useHintingService);
	}

	function toggleswitch2_checked_binding(value) {
		maskSessionWhenHints = value;
		$$invalidate(2, maskSessionWhenHints);
	}

	function toggleswitch3_checked_binding(value) {
		useHTTPSOnly = value;
		$$invalidate(3, useHTTPSOnly);
	}

	$$self.$$set = $$props => {
		if ('update' in $$props) $$invalidate(7, update = $$props.update);
	};

	$$self.$capture_state = () => ({
		ListItem,
		TextBlock,
		ContentDialog,
		Button,
		ToggleSwitch,
		getContext,
		noFirstTime,
		DataClearer,
		config,
		update,
		clearDialog,
		siteSettingsDialog,
		noCOPermissions,
		updateCOPs,
		useHintingService,
		updateHintingService,
		maskSessionWhenHints,
		updateMask,
		useHTTPSOnly,
		updateHTTPSOnly,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('config' in $$props) $$invalidate(6, config = $$props.config);
		if ('update' in $$props) $$invalidate(7, update = $$props.update);
		if ('clearDialog' in $$props) $$invalidate(4, clearDialog = $$props.clearDialog);
		if ('siteSettingsDialog' in $$props) $$invalidate(5, siteSettingsDialog = $$props.siteSettingsDialog);
		if ('noCOPermissions' in $$props) $$invalidate(0, noCOPermissions = $$props.noCOPermissions);
		if ('useHintingService' in $$props) $$invalidate(1, useHintingService = $$props.useHintingService);
		if ('maskSessionWhenHints' in $$props) $$invalidate(2, maskSessionWhenHints = $$props.maskSessionWhenHints);
		if ('useHTTPSOnly' in $$props) $$invalidate(3, useHTTPSOnly = $$props.useHTTPSOnly);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*noCOPermissions*/ 1) {
			$: {
				noCOPermissions;
				updateCOPs();
			}
		}

		if ($$self.$$.dirty & /*useHintingService*/ 2) {
			$: {
				useHintingService;
				updateHintingService();
			}
		}

		if ($$self.$$.dirty & /*maskSessionWhenHints*/ 4) {
			$: {
				maskSessionWhenHints;
				updateMask();
			}
		}

		if ($$self.$$.dirty & /*useHTTPSOnly*/ 8) {
			$: {
				useHTTPSOnly;
				updateHTTPSOnly();
			}
		}
	};

	return [
		noCOPermissions,
		useHintingService,
		maskSessionWhenHints,
		useHTTPSOnly,
		clearDialog,
		siteSettingsDialog,
		config,
		update,
		dataclearer_open_binding,
		click_handler,
		contentdialog_open_binding,
		click_handler_1,
		click_handler_2,
		toggleswitch0_checked_binding,
		toggleswitch1_checked_binding,
		toggleswitch2_checked_binding,
		toggleswitch3_checked_binding
	];
}

class Privacy extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { update: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Privacy",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*update*/ ctx[7] === undefined && !('update' in props)) {
			console.warn("<Privacy> was created without expected prop 'update'");
		}
	}

	get update() {
		throw new Error("<Privacy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error("<Privacy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Privacy;