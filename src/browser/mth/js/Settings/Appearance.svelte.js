/* src\browser\mth\$svelte\src\Settings\Appearance.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	group_outros,
	init,
	insert_dev,
	is_function,
	mount_component,
	safe_not_equal,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots,
	validate_store
} from "mth://.svelte/internal";

const { console: console_1 } = globals;

import {
	TextBlock,
	ComboBox,
	Checkbox,
	InfoBar,
	Slider
} from "mth://js/fluent-svelte/index.js";

import { getContext } from "mth://.svelte/internal";
import noFirstTime from "mth://js/nft.js";
const file = "src\\browser\\mth\\$svelte\\src\\Settings\\Appearance.svelte";

// (63:2) <TextBlock>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Theme:");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(63:2) <TextBlock>",
		ctx
	});

	return block;
}

// (75:2) <Checkbox      bind:checked={bookmarkBar}    >
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Show bookmarks panel");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(75:2) <Checkbox      bind:checked={bookmarkBar}    >",
		ctx
	});

	return block;
}

// (79:0) {#if bookmarkBar}
function create_if_block(ctx) {
	let infobar;
	let current;

	infobar = new InfoBar({
			props: {
				closable: false,
				severity: "caution",
				title: "This feature is not yet available"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(infobar.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(infobar, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(infobar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(infobar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(infobar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(79:0) {#if bookmarkBar}",
		ctx
	});

	return block;
}

// (83:2) <TextBlock>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Default page zoom:");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(83:2) <TextBlock>",
		ctx
	});

	return block;
}

// (91:2) <TextBlock>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Monolith's UI zoom:");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(91:2) <TextBlock>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div0;
	let textblock0;
	let t0;
	let combobox;
	let updating_value;
	let t1;
	let div1;
	let checkbox;
	let updating_checked;
	let t2;
	let t3;
	let div2;
	let textblock1;
	let t4;
	let slider0;
	let updating_value_1;
	let t5;
	let div3;
	let textblock2;
	let t6;
	let slider1;
	let updating_value_2;
	let current;

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function combobox_value_binding(value) {
		/*combobox_value_binding*/ ctx[7](value);
	}

	let combobox_props = {
		items: [
			{ name: 'Dark', value: 'dark' },
			{ name: 'Light', value: 'light' },
			{ name: 'Same as system', value: 'system' }
		]
	};

	if (/*theme*/ ctx[3].value !== void 0) {
		combobox_props.value = /*theme*/ ctx[3].value;
	}

	combobox = new ComboBox({ props: combobox_props, $$inline: true });
	binding_callbacks.push(() => bind(combobox, 'value', combobox_value_binding));

	combobox.$on("select", function () {
		if (is_function(/*theme*/ ctx[3].select)) /*theme*/ ctx[3].select.apply(this, arguments);
	});

	function checkbox_checked_binding(value) {
		/*checkbox_checked_binding*/ ctx[8](value);
	}

	let checkbox_props = {
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*bookmarkBar*/ ctx[0] !== void 0) {
		checkbox_props.checked = /*bookmarkBar*/ ctx[0];
	}

	checkbox = new Checkbox({ props: checkbox_props, $$inline: true });
	binding_callbacks.push(() => bind(checkbox, 'checked', checkbox_checked_binding));
	let if_block = /*bookmarkBar*/ ctx[0] && create_if_block(ctx);

	textblock1 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function slider0_value_binding(value) {
		/*slider0_value_binding*/ ctx[9](value);
	}

	let slider0_props = { suffix: "%", min: 1, max: 200 };

	if (/*defaultPageZoom_proxy*/ ctx[1] !== void 0) {
		slider0_props.value = /*defaultPageZoom_proxy*/ ctx[1];
	}

	slider0 = new Slider({ props: slider0_props, $$inline: true });
	binding_callbacks.push(() => bind(slider0, 'value', slider0_value_binding));

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function slider1_value_binding(value) {
		/*slider1_value_binding*/ ctx[10](value);
	}

	let slider1_props = { suffix: "%", min: 1, max: 200 };

	if (/*chromeZoom_proxy*/ ctx[2] !== void 0) {
		slider1_props.value = /*chromeZoom_proxy*/ ctx[2];
	}

	slider1 = new Slider({ props: slider1_props, $$inline: true });
	binding_callbacks.push(() => bind(slider1, 'value', slider1_value_binding));

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			create_component(combobox.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(checkbox.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			div2 = element("div");
			create_component(textblock1.$$.fragment);
			t4 = space();
			create_component(slider0.$$.fragment);
			t5 = space();
			div3 = element("div");
			create_component(textblock2.$$.fragment);
			t6 = space();
			create_component(slider1.$$.fragment);
			attr_dev(div0, "class", "s-option");
			add_location(div0, file, 61, 0, 2062);
			attr_dev(div1, "class", "s-option");
			add_location(div1, file, 73, 0, 2364);
			attr_dev(div2, "class", "s-option");
			add_location(div2, file, 81, 0, 2598);
			attr_dev(div3, "class", "s-option");
			add_location(div3, file, 89, 0, 2773);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(textblock0, div0, null);
			append_dev(div0, t0);
			mount_component(combobox, div0, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			mount_component(checkbox, div1, null);
			insert_dev(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			mount_component(textblock1, div2, null);
			append_dev(div2, t4);
			mount_component(slider0, div2, null);
			insert_dev(target, t5, anchor);
			insert_dev(target, div3, anchor);
			mount_component(textblock2, div3, null);
			append_dev(div3, t6);
			mount_component(slider1, div3, null);
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const combobox_changes = {};

			if (!updating_value && dirty & /*theme*/ 8) {
				updating_value = true;
				combobox_changes.value = /*theme*/ ctx[3].value;
				add_flush_callback(() => updating_value = false);
			}

			combobox.$set(combobox_changes);
			const checkbox_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				checkbox_changes.$$scope = { dirty, ctx };
			}

			if (!updating_checked && dirty & /*bookmarkBar*/ 1) {
				updating_checked = true;
				checkbox_changes.checked = /*bookmarkBar*/ ctx[0];
				add_flush_callback(() => updating_checked = false);
			}

			checkbox.$set(checkbox_changes);

			if (/*bookmarkBar*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*bookmarkBar*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t3.parentNode, t3);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const textblock1_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const slider0_changes = {};

			if (!updating_value_1 && dirty & /*defaultPageZoom_proxy*/ 2) {
				updating_value_1 = true;
				slider0_changes.value = /*defaultPageZoom_proxy*/ ctx[1];
				add_flush_callback(() => updating_value_1 = false);
			}

			slider0.$set(slider0_changes);
			const textblock2_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
			const slider1_changes = {};

			if (!updating_value_2 && dirty & /*chromeZoom_proxy*/ 4) {
				updating_value_2 = true;
				slider1_changes.value = /*chromeZoom_proxy*/ ctx[2];
				add_flush_callback(() => updating_value_2 = false);
			}

			slider1.$set(slider1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(combobox.$$.fragment, local);
			transition_in(checkbox.$$.fragment, local);
			transition_in(if_block);
			transition_in(textblock1.$$.fragment, local);
			transition_in(slider0.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(slider1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(combobox.$$.fragment, local);
			transition_out(checkbox.$$.fragment, local);
			transition_out(if_block);
			transition_out(textblock1.$$.fragment, local);
			transition_out(slider0.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(slider1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(textblock0);
			destroy_component(combobox);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			destroy_component(checkbox);
			if (detaching) detach_dev(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			destroy_component(textblock1);
			destroy_component(slider0);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div3);
			destroy_component(textblock2);
			destroy_component(slider1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function throttle(func, ms = 200) {
	let timeout;

	return function wrapper() {
		if (timeout) {
			clearTimeout(timeout);
		}

		timeout = setTimeout(func, ms);
	};
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Appearance', slots, []);
	let config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(11, $config = value));

	const theme = {
		select({ detail }) {
			console.log('selected', detail);
			set_store_value(config, $config.ui.theme = detail.value, $config);
			window.monolith.userdata.config.set($config);
		},
		value: $config.ui.theme
	};

	let bookmarkBar = $config.ui.showBookmarks;

	const updateBookmarkBar = noFirstTime(() => {
		console.log('bm-b', bookmarkBar);
		set_store_value(config, $config.ui.showBookmarks = bookmarkBar, $config);
		window.monolith.userdata.config.set($config);
	});

	let defaultPageZoom = $config.ui.defaultZoomFactor * 100;
	let defaultPageZoom_proxy = defaultPageZoom; // proxy to not trigger write operation EVERY time the slider is changed

	const updatePageZoom = noFirstTime(() => {
		console.log('z-page', defaultPageZoom);
		set_store_value(config, $config.ui.defaultZoomFactor = Number((defaultPageZoom / 100).toPrecision(2)), $config);
		window.monolith.userdata.config.set($config);
	});

	const pageZoomThrottled = throttle(() => {
		$$invalidate(5, defaultPageZoom = defaultPageZoom_proxy);
	});

	let chromeZoom = $config.ui.chromeZoomFactor * 100;
	let chromeZoom_proxy = chromeZoom;

	const updateChromeZoom = noFirstTime(() => {
		console.log('z-chr', chromeZoom);
		set_store_value(config, $config.ui.chromeZoomFactor = Number((chromeZoom / 100).toPrecision(2)), $config);
		window.monolith.userdata.config.set($config);
	});

	const chromeZoomThrottled = throttle(() => {
		$$invalidate(6, chromeZoom = chromeZoom_proxy);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Appearance> was created with unknown prop '${key}'`);
	});

	function combobox_value_binding(value) {
		if ($$self.$$.not_equal(theme.value, value)) {
			theme.value = value;
			$$invalidate(3, theme);
		}
	}

	function checkbox_checked_binding(value) {
		bookmarkBar = value;
		$$invalidate(0, bookmarkBar);
	}

	function slider0_value_binding(value) {
		defaultPageZoom_proxy = value;
		$$invalidate(1, defaultPageZoom_proxy);
	}

	function slider1_value_binding(value) {
		chromeZoom_proxy = value;
		$$invalidate(2, chromeZoom_proxy);
	}

	$$self.$capture_state = () => ({
		TextBlock,
		ComboBox,
		Checkbox,
		InfoBar,
		Slider,
		getContext,
		noFirstTime,
		throttle,
		config,
		theme,
		bookmarkBar,
		updateBookmarkBar,
		defaultPageZoom,
		defaultPageZoom_proxy,
		updatePageZoom,
		pageZoomThrottled,
		chromeZoom,
		chromeZoom_proxy,
		updateChromeZoom,
		chromeZoomThrottled,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('config' in $$props) $$invalidate(4, config = $$props.config);
		if ('bookmarkBar' in $$props) $$invalidate(0, bookmarkBar = $$props.bookmarkBar);
		if ('defaultPageZoom' in $$props) $$invalidate(5, defaultPageZoom = $$props.defaultPageZoom);
		if ('defaultPageZoom_proxy' in $$props) $$invalidate(1, defaultPageZoom_proxy = $$props.defaultPageZoom_proxy);
		if ('chromeZoom' in $$props) $$invalidate(6, chromeZoom = $$props.chromeZoom);
		if ('chromeZoom_proxy' in $$props) $$invalidate(2, chromeZoom_proxy = $$props.chromeZoom_proxy);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*bookmarkBar*/ 1) {
			$: {
				bookmarkBar;
				updateBookmarkBar();
			}
		}

		if ($$self.$$.dirty & /*defaultPageZoom*/ 32) {
			$: {
				defaultPageZoom;
				updatePageZoom();
			}
		}

		if ($$self.$$.dirty & /*defaultPageZoom_proxy*/ 2) {
			$: {
				defaultPageZoom_proxy;
				pageZoomThrottled();
			}
		}

		if ($$self.$$.dirty & /*chromeZoom*/ 64) {
			$: {
				chromeZoom;
				updateChromeZoom();
			}
		}

		if ($$self.$$.dirty & /*chromeZoom_proxy*/ 4) {
			$: {
				chromeZoom_proxy;
				chromeZoomThrottled();
			}
		}
	};

	return [
		bookmarkBar,
		defaultPageZoom_proxy,
		chromeZoom_proxy,
		theme,
		config,
		defaultPageZoom,
		chromeZoom,
		combobox_value_binding,
		checkbox_checked_binding,
		slider0_value_binding,
		slider1_value_binding
	];
}

class Appearance extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Appearance",
			options,
			id: create_fragment.name
		});
	}
}

export default Appearance;