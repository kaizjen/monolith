/* $svelte\fluent-svelte-raw\NavigationView\NavigationView.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	append_styles,
	attr,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { createEventDispatcher } from "mth://.svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-z527vv", ".navigation-view.svelte-z527vv.svelte-z527vv{block-size:100%;display:flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:100%;line-height:20px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.navigation-view.variant--default.svelte-z527vv .navigation-view-pane.svelte-z527vv{inline-size:48px}.navigation-view.variant--default.svelte-z527vv .navigation-view-pane.expanded.svelte-z527vv{inline-size:320px}.navigation-view-pane.svelte-z527vv.svelte-z527vv{block-size:100%;display:flex;flex:0 0 auto;flex-direction:column;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.navigation-view-pane-header.svelte-z527vv.svelte-z527vv{-webkit-padding-before:4px;display:block;flex:0 0 auto;padding-block-start:4px}.navigation-view-page.svelte-z527vv.svelte-z527vv{-webkit-border-after:none;-webkit-border-end:none;background-clip:padding-box;background-color:var(--fds-layer-background-default);border:1px solid var(--fds-card-stroke-default);border-block-end:none;border-inline-end:none;border-start-start-radius:var(--fds-overlay-corner-radius);display:flex;flex:1 1 auto;flex-direction:column;padding-block:44px;padding-inline:56px}");
}

const get_footer_slot_changes = dirty => ({});
const get_footer_slot_context = ctx => ({});
const get_items_slot_changes = dirty => ({});
const get_items_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (12:3) {#if backButton}
function create_if_block_1(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = `${"<-"}`;
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (17:3) {#if menuButton}
function create_if_block(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = `${"-"}`;
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[8]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let main;
	let aside;
	let header;
	let t0;
	let t1;
	let t2;
	let t3;
	let footer;
	let t4;
	let article;
	let main_class_value;
	let current;
	let if_block0 = /*backButton*/ ctx[3] && create_if_block_1(ctx);
	let if_block1 = /*menuButton*/ ctx[2] && create_if_block(ctx);
	const header_slot_template = /*#slots*/ ctx[6].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[5], get_header_slot_context);
	const items_slot_template = /*#slots*/ ctx[6].items;
	const items_slot = create_slot(items_slot_template, ctx, /*$$scope*/ ctx[5], get_items_slot_context);
	const footer_slot_template = /*#slots*/ ctx[6].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[5], get_footer_slot_context);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			main = element("main");
			aside = element("aside");
			header = element("header");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (header_slot) header_slot.c();
			t2 = space();
			if (items_slot) items_slot.c();
			t3 = space();
			footer = element("footer");
			if (footer_slot) footer_slot.c();
			t4 = space();
			article = element("article");
			if (default_slot) default_slot.c();
			attr(header, "class", "navigation-view-pane-header svelte-z527vv");
			attr(footer, "class", "navigation-view-pane-footer");
			attr(aside, "class", "navigation-view-pane svelte-z527vv");
			toggle_class(aside, "expanded", /*expanded*/ ctx[0]);
			attr(article, "class", "navigation-view-page svelte-z527vv");
			attr(main, "class", main_class_value = "navigation-view variant-" + /*variant*/ ctx[1] + " svelte-z527vv");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, aside);
			append(aside, header);
			if (if_block0) if_block0.m(header, null);
			append(header, t0);
			if (if_block1) if_block1.m(header, null);
			append(header, t1);

			if (header_slot) {
				header_slot.m(header, null);
			}

			append(aside, t2);

			if (items_slot) {
				items_slot.m(aside, null);
			}

			append(aside, t3);
			append(aside, footer);

			if (footer_slot) {
				footer_slot.m(footer, null);
			}

			append(main, t4);
			append(main, article);

			if (default_slot) {
				default_slot.m(article, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*backButton*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(header, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*menuButton*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(header, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (header_slot) {
				if (header_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[5], dirty, get_header_slot_changes),
						get_header_slot_context
					);
				}
			}

			if (items_slot) {
				if (items_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						items_slot,
						items_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(items_slot_template, /*$$scope*/ ctx[5], dirty, get_items_slot_changes),
						get_items_slot_context
					);
				}
			}

			if (footer_slot) {
				if (footer_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[5], dirty, get_footer_slot_changes),
						get_footer_slot_context
					);
				}
			}

			if (dirty & /*expanded*/ 1) {
				toggle_class(aside, "expanded", /*expanded*/ ctx[0]);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*variant*/ 2 && main_class_value !== (main_class_value = "navigation-view variant-" + /*variant*/ ctx[1] + " svelte-z527vv")) {
				attr(main, "class", main_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(items_slot, local);
			transition_in(footer_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(header_slot, local);
			transition_out(items_slot, local);
			transition_out(footer_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (header_slot) header_slot.d(detaching);
			if (items_slot) items_slot.d(detaching);
			if (footer_slot) footer_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { variant = "default" } = $$props;
	let { expanded = true } = $$props;
	let { menuButton = true } = $$props;
	let { backButton = true } = $$props;
	const dispatch = createEventDispatcher();
	const click_handler = () => dispatch("back");
	const click_handler_1 = () => $$invalidate(0, expanded = !expanded);

	$$self.$$set = $$props => {
		if ('variant' in $$props) $$invalidate(1, variant = $$props.variant);
		if ('expanded' in $$props) $$invalidate(0, expanded = $$props.expanded);
		if ('menuButton' in $$props) $$invalidate(2, menuButton = $$props.menuButton);
		if ('backButton' in $$props) $$invalidate(3, backButton = $$props.backButton);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		expanded,
		variant,
		menuButton,
		backButton,
		dispatch,
		$$scope,
		slots,
		click_handler,
		click_handler_1
	];
}

class NavigationView extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				variant: 1,
				expanded: 0,
				menuButton: 2,
				backButton: 3
			},
			add_css
		);
	}
}

export default NavigationView;