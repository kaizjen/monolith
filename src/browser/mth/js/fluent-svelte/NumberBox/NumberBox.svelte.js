/* $svelte\fluent-svelte-raw\NumberBox\NumberBox.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	append_styles,
	assign,
	attr,
	bind,
	binding_callbacks,
	bubble,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import TextBox from "../TextBox/TextBox.svelte";
import TextBoxButton from "../TextBox/TextBoxButton.svelte";

function add_css(target) {
	append_styles(target, "svelte-1ipblxo", ".number-box input{-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.number-box input::-webkit-inner-spin-button,.number-box input::-webkit-outer-spin-button{-webkit-appearance:none;appearance:none;margin:0}.number-box-spinner-flyout.svelte-1ipblxo{background-clip:padding-box;background-color:var(--fds-solid-background-quarternary);border:1px solid var(--fds-surface-stroke-flyout);border-radius:var(--fds-overlay-corner-radius);box-shadow:var(--fds-flyout-shadow);box-sizing:border-box;display:flex;flex-direction:column;inset-inline-end:-16px;padding:2px 4px;position:absolute;z-index:100}.number-box-spinner-flyout.svelte-1ipblxo .number-box-spinner{block-size:36px;inline-size:36px;margin:2px 1px}");
}

const get_buttons_slot_changes = dirty => ({});
const get_buttons_slot_context = ctx => ({});

// (80:0) <TextBox  class="number-box {className ?? ''}"  type="number"  bind:inputElement  bind:containerElement  bind:buttonsContainerElement  bind:clearButtonElement  bind:value  on:outermousedown={() => (spinnerFlyoutOpen = false)}  on:change  on:input  on:beforeinput  on:click  on:blur  on:focus={() => (spinnerFlyoutOpen = true)}  on:focus  on:dblclick  on:contextmenu  on:mousedown  on:mouseup  on:mouseover  on:mouseout  on:mouseenter  on:mouseleave  on:keypress  on:keydown  on:keyup  on:clear  {min}  {max}  {step}  {disabled}  {...$$restProps} >
function create_default_slot_5(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[24].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[56], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[56],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[56])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[56], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (165:2) {:else}
function create_else_block(ctx) {
	let textboxbutton;
	let t;
	let if_block_anchor;
	let current;

	textboxbutton = new TextBoxButton({
			props: {
				disabled: /*disabled*/ ctx[12],
				class: "number-box-spinner-compact",
				tabindex: "-1",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	textboxbutton.$on("mousedown", /*mousedown_handler_1*/ ctx[27]);
	let if_block = /*spinnerFlyoutOpen*/ ctx[14] && create_if_block_2(ctx);

	return {
		c() {
			create_component(textboxbutton.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(textboxbutton, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton_changes = {};
			if (dirty[0] & /*disabled*/ 4096) textboxbutton_changes.disabled = /*disabled*/ ctx[12];

			if (dirty[1] & /*$$scope*/ 33554432) {
				textboxbutton_changes.$$scope = { dirty, ctx };
			}

			textboxbutton.$set(textboxbutton_changes);

			if (/*spinnerFlyoutOpen*/ ctx[14]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*spinnerFlyoutOpen*/ 16384) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(textboxbutton, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (116:2) {#if inline}
function create_if_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = !/*disabled*/ ctx[12] && create_if_block_1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!/*disabled*/ ctx[12]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*disabled*/ 4096) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (166:3) <TextBoxButton     {disabled}     class="number-box-spinner-compact"     tabindex="-1"     on:mousedown={() => inputElement.focus()}    >
function create_default_slot_4(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M128,384C128,375.333 131.167,367.833 137.5,361.5L487,10.5C494,3.5 502.333,0 512,0C521.667,0 530,3.5 537,10.5L886.5,361.5C892.833,367.833 896,375.333 896,384C896,392.667 892.833,400.167 886.5,406.5C880.167,412.833 872.667,416 864,416C855.333,416 847.833,412.833 841.5,406.5L512,76L182.5,406.5C176.167,412.833 168.667,416 160,416C151.333,416 143.833,412.833 137.5,406.5C131.167,400.167 128,392.667 128,384ZM128,640C128,631.333 131.167,623.833 137.5,617.5C143.833,611.167 151.333,608 160,608C168.667,608 176.167,611.167 182.5,617.5L512,948L841.5,617.5C847.833,611.167 855.333,608 864,608C872.667,608 880.167,611.167 886.5,617.5C892.833,623.833 896,631.333 896,640C896,648.667 892.833,656.167 886.5,662.5L537,1013.5C530,1020.5 521.667,1024 512,1024C502.333,1024 494,1020.5 487,1013.5L137.5,662.5C131.167,656.167 128,648.667 128,640Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "height", "12");
			attr(svg, "width", "100%");
			attr(svg, "viewBox", "128 0 768 1024");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (185:3) {#if spinnerFlyoutOpen}
function create_if_block_2(ctx) {
	let div;
	let textboxbutton0;
	let updating_element;
	let t;
	let textboxbutton1;
	let updating_element_1;
	let current;

	function textboxbutton0_element_binding_1(value) {
		/*textboxbutton0_element_binding_1*/ ctx[28](value);
	}

	let textboxbutton0_props = {
		class: "number-box-spinner",
		disabled: /*spinUpButtonDisabled*/ ctx[16],
		"aria-label": "Increase number",
		tabindex: "-1",
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	};

	if (/*spinUpButtonElement*/ ctx[4] !== void 0) {
		textboxbutton0_props.element = /*spinUpButtonElement*/ ctx[4];
	}

	textboxbutton0 = new TextBoxButton({ props: textboxbutton0_props });
	binding_callbacks.push(() => bind(textboxbutton0, 'element', textboxbutton0_element_binding_1));
	textboxbutton0.$on("mousedown", /*spinUp*/ ctx[17]);
	textboxbutton0.$on("mouseup", /*stopSpinIntervals*/ ctx[19]);
	textboxbutton0.$on("mouseleave", /*stopSpinIntervals*/ ctx[19]);

	function textboxbutton1_element_binding_1(value) {
		/*textboxbutton1_element_binding_1*/ ctx[29](value);
	}

	let textboxbutton1_props = {
		tabindex: "-1",
		"aria-label": "Decrease number",
		class: "number-box-spinner",
		disabled: /*spinDownButtonDisabled*/ ctx[15],
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*spinDownButtonElement*/ ctx[6] !== void 0) {
		textboxbutton1_props.element = /*spinDownButtonElement*/ ctx[6];
	}

	textboxbutton1 = new TextBoxButton({ props: textboxbutton1_props });
	binding_callbacks.push(() => bind(textboxbutton1, 'element', textboxbutton1_element_binding_1));
	textboxbutton1.$on("mousedown", /*spinDown*/ ctx[18]);
	textboxbutton1.$on("mouseup", /*stopSpinIntervals*/ ctx[19]);
	textboxbutton1.$on("mouseleave", /*stopSpinIntervals*/ ctx[19]);

	return {
		c() {
			div = element("div");
			create_component(textboxbutton0.$$.fragment);
			t = space();
			create_component(textboxbutton1.$$.fragment);
			attr(div, "class", "number-box-spinner-flyout svelte-1ipblxo");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(textboxbutton0, div, null);
			append(div, t);
			mount_component(textboxbutton1, div, null);
			/*div_binding*/ ctx[30](div);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton0_changes = {};
			if (dirty[0] & /*spinUpButtonDisabled*/ 65536) textboxbutton0_changes.disabled = /*spinUpButtonDisabled*/ ctx[16];

			if (dirty[1] & /*$$scope*/ 33554432) {
				textboxbutton0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty[0] & /*spinUpButtonElement*/ 16) {
				updating_element = true;
				textboxbutton0_changes.element = /*spinUpButtonElement*/ ctx[4];
				add_flush_callback(() => updating_element = false);
			}

			textboxbutton0.$set(textboxbutton0_changes);
			const textboxbutton1_changes = {};
			if (dirty[0] & /*spinDownButtonDisabled*/ 32768) textboxbutton1_changes.disabled = /*spinDownButtonDisabled*/ ctx[15];

			if (dirty[1] & /*$$scope*/ 33554432) {
				textboxbutton1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element_1 && dirty[0] & /*spinDownButtonElement*/ 64) {
				updating_element_1 = true;
				textboxbutton1_changes.element = /*spinDownButtonElement*/ ctx[6];
				add_flush_callback(() => updating_element_1 = false);
			}

			textboxbutton1.$set(textboxbutton1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton0.$$.fragment, local);
			transition_in(textboxbutton1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton0.$$.fragment, local);
			transition_out(textboxbutton1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(textboxbutton0);
			destroy_component(textboxbutton1);
			/*div_binding*/ ctx[30](null);
		}
	};
}

// (187:5) <TextBoxButton       on:mousedown={spinUp}       on:mouseup={stopSpinIntervals}       on:mouseleave={stopSpinIntervals}       bind:element={spinUpButtonElement}       class="number-box-spinner"       disabled={spinUpButtonDisabled}       aria-label="Increase number"       tabindex="-1"      >
function create_default_slot_3(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M3.14645 10.3536C3.34171 10.5488 3.65829 10.5488 3.85355 10.3536L8 6.20711L12.1464 10.3536C12.3417 10.5488 12.6583 10.5488 12.8536 10.3536C13.0488 10.1583 13.0488 9.84171 12.8536 9.64645L8.35355 5.14645C8.15829 4.95118 7.84171 4.95118 7.64645 5.14645L3.14645 9.64645C2.95118 9.84171 2.95118 10.1583 3.14645 10.3536Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "16");
			attr(svg, "height", "16");
			attr(svg, "viewBox", "0 0 16 16");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (210:5) <TextBoxButton       on:mousedown={spinDown}       on:mouseup={stopSpinIntervals}       on:mouseleave={stopSpinIntervals}       bind:element={spinDownButtonElement}       tabindex="-1"       aria-label="Decrease number"       class="number-box-spinner"       disabled={spinDownButtonDisabled}      >
function create_default_slot_2(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M3.14645 5.64645C3.34171 5.45118 3.65829 5.45118 3.85355 5.64645L8 9.79289L12.1464 5.64645C12.3417 5.45118 12.6583 5.45118 12.8536 5.64645C13.0488 5.84171 13.0488 6.15829 12.8536 6.35355L8.35355 10.8536C8.15829 11.0488 7.84171 11.0488 7.64645 10.8536L3.14645 6.35355C2.95118 6.15829 2.95118 5.84171 3.14645 5.64645Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "16");
			attr(svg, "height", "16");
			attr(svg, "viewBox", "0 0 16 16");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (117:3) {#if !disabled}
function create_if_block_1(ctx) {
	let textboxbutton0;
	let updating_element;
	let t;
	let textboxbutton1;
	let updating_element_1;
	let current;

	function textboxbutton0_element_binding(value) {
		/*textboxbutton0_element_binding*/ ctx[25](value);
	}

	let textboxbutton0_props = {
		tabindex: "-1",
		"aria-label": "Increase number",
		disabled: /*spinUpButtonDisabled*/ ctx[16],
		class: "number-box-spinner",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*spinUpButtonElement*/ ctx[4] !== void 0) {
		textboxbutton0_props.element = /*spinUpButtonElement*/ ctx[4];
	}

	textboxbutton0 = new TextBoxButton({ props: textboxbutton0_props });
	binding_callbacks.push(() => bind(textboxbutton0, 'element', textboxbutton0_element_binding));
	textboxbutton0.$on("mousedown", /*spinUp*/ ctx[17]);
	textboxbutton0.$on("mouseup", /*stopSpinIntervals*/ ctx[19]);
	textboxbutton0.$on("mouseleave", /*stopSpinIntervals*/ ctx[19]);

	function textboxbutton1_element_binding(value) {
		/*textboxbutton1_element_binding*/ ctx[26](value);
	}

	let textboxbutton1_props = {
		tabindex: "-1",
		"aria-label": "Decrease number",
		class: "number-box-spinner",
		disabled: /*spinDownButtonDisabled*/ ctx[15],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*spinDownButtonElement*/ ctx[6] !== void 0) {
		textboxbutton1_props.element = /*spinDownButtonElement*/ ctx[6];
	}

	textboxbutton1 = new TextBoxButton({ props: textboxbutton1_props });
	binding_callbacks.push(() => bind(textboxbutton1, 'element', textboxbutton1_element_binding));
	textboxbutton1.$on("mousedown", /*spinDown*/ ctx[18]);
	textboxbutton1.$on("mouseup", /*stopSpinIntervals*/ ctx[19]);
	textboxbutton1.$on("mouseleave", /*stopSpinIntervals*/ ctx[19]);

	return {
		c() {
			create_component(textboxbutton0.$$.fragment);
			t = space();
			create_component(textboxbutton1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textboxbutton0, target, anchor);
			insert(target, t, anchor);
			mount_component(textboxbutton1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton0_changes = {};
			if (dirty[0] & /*spinUpButtonDisabled*/ 65536) textboxbutton0_changes.disabled = /*spinUpButtonDisabled*/ ctx[16];

			if (dirty[1] & /*$$scope*/ 33554432) {
				textboxbutton0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty[0] & /*spinUpButtonElement*/ 16) {
				updating_element = true;
				textboxbutton0_changes.element = /*spinUpButtonElement*/ ctx[4];
				add_flush_callback(() => updating_element = false);
			}

			textboxbutton0.$set(textboxbutton0_changes);
			const textboxbutton1_changes = {};
			if (dirty[0] & /*spinDownButtonDisabled*/ 32768) textboxbutton1_changes.disabled = /*spinDownButtonDisabled*/ ctx[15];

			if (dirty[1] & /*$$scope*/ 33554432) {
				textboxbutton1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element_1 && dirty[0] & /*spinDownButtonElement*/ 64) {
				updating_element_1 = true;
				textboxbutton1_changes.element = /*spinDownButtonElement*/ ctx[6];
				add_flush_callback(() => updating_element_1 = false);
			}

			textboxbutton1.$set(textboxbutton1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton0.$$.fragment, local);
			transition_in(textboxbutton1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton0.$$.fragment, local);
			transition_out(textboxbutton1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textboxbutton0, detaching);
			if (detaching) detach(t);
			destroy_component(textboxbutton1, detaching);
		}
	};
}

// (118:4) <TextBoxButton      on:mousedown={spinUp}      on:mouseup={stopSpinIntervals}      on:mouseleave={stopSpinIntervals}      bind:element={spinUpButtonElement}      tabindex="-1"      aria-label="Increase number"      disabled={spinUpButtonDisabled}      class="number-box-spinner"     >
function create_default_slot_1(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M2.14645 7.35355C2.34171 7.54882 2.65829 7.54882 2.85355 7.35355L6 4.20711L9.14645 7.35355C9.34171 7.54882 9.65829 7.54882 9.85355 7.35355C10.0488 7.15829 10.0488 6.84171 9.85355 6.64645L6.35355 3.14645C6.15829 2.95118 5.84171 2.95118 5.64645 3.14645L2.14645 6.64645C1.95118 6.84171 1.95118 7.15829 2.14645 7.35355Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "12");
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 12 12");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (141:4) <TextBoxButton      on:mousedown={spinDown}      on:mouseup={stopSpinIntervals}      on:mouseleave={stopSpinIntervals}      bind:element={spinDownButtonElement}      tabindex="-1"      aria-label="Decrease number"      class="number-box-spinner"      disabled={spinDownButtonDisabled}     >
function create_default_slot(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M2.14645 4.64645C2.34171 4.45118 2.65829 4.45118 2.85355 4.64645L6 7.79289L9.14645 4.64645C9.34171 4.45118 9.65829 4.45118 9.85355 4.64645C10.0488 4.84171 10.0488 5.15829 9.85355 5.35355L6.35355 8.85355C6.15829 9.04882 5.84171 9.04882 5.64645 8.85355L2.14645 5.35355C1.95118 5.15829 1.95118 4.84171 2.14645 4.64645Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "12");
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 12 12");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (115:1) <svelte:fragment slot="buttons">
function create_buttons_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*inline*/ ctx[8]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const buttons_slot_template = /*#slots*/ ctx[24].buttons;
	const buttons_slot = create_slot(buttons_slot_template, ctx, /*$$scope*/ ctx[56], get_buttons_slot_context);

	return {
		c() {
			if_block.c();
			t = space();
			if (buttons_slot) buttons_slot.c();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, t, anchor);

			if (buttons_slot) {
				buttons_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(t.parentNode, t);
			}

			if (buttons_slot) {
				if (buttons_slot.p && (!current || dirty[1] & /*$$scope*/ 33554432)) {
					update_slot_base(
						buttons_slot,
						buttons_slot_template,
						ctx,
						/*$$scope*/ ctx[56],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[56])
						: get_slot_changes(buttons_slot_template, /*$$scope*/ ctx[56], dirty, get_buttons_slot_changes),
						get_buttons_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(buttons_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(buttons_slot, local);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(t);
			if (buttons_slot) buttons_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let textbox;
	let updating_inputElement;
	let updating_containerElement;
	let updating_buttonsContainerElement;
	let updating_clearButtonElement;
	let updating_value;
	let current;
	let mounted;
	let dispose;

	const textbox_spread_levels = [
		{
			class: "number-box " + (/*className*/ ctx[13] ?? '')
		},
		{ type: "number" },
		{ min: /*min*/ ctx[9] },
		{ max: /*max*/ ctx[10] },
		{ step: /*step*/ ctx[11] },
		{ disabled: /*disabled*/ ctx[12] },
		/*$$restProps*/ ctx[21]
	];

	function textbox_inputElement_binding(value) {
		/*textbox_inputElement_binding*/ ctx[31](value);
	}

	function textbox_containerElement_binding(value) {
		/*textbox_containerElement_binding*/ ctx[32](value);
	}

	function textbox_buttonsContainerElement_binding(value) {
		/*textbox_buttonsContainerElement_binding*/ ctx[33](value);
	}

	function textbox_clearButtonElement_binding(value) {
		/*textbox_clearButtonElement_binding*/ ctx[34](value);
	}

	function textbox_value_binding(value) {
		/*textbox_value_binding*/ ctx[35](value);
	}

	let textbox_props = {
		$$slots: {
			buttons: [create_buttons_slot],
			default: [create_default_slot_5]
		},
		$$scope: { ctx }
	};

	for (let i = 0; i < textbox_spread_levels.length; i += 1) {
		textbox_props = assign(textbox_props, textbox_spread_levels[i]);
	}

	if (/*inputElement*/ ctx[1] !== void 0) {
		textbox_props.inputElement = /*inputElement*/ ctx[1];
	}

	if (/*containerElement*/ ctx[2] !== void 0) {
		textbox_props.containerElement = /*containerElement*/ ctx[2];
	}

	if (/*buttonsContainerElement*/ ctx[3] !== void 0) {
		textbox_props.buttonsContainerElement = /*buttonsContainerElement*/ ctx[3];
	}

	if (/*clearButtonElement*/ ctx[5] !== void 0) {
		textbox_props.clearButtonElement = /*clearButtonElement*/ ctx[5];
	}

	if (/*value*/ ctx[0] !== void 0) {
		textbox_props.value = /*value*/ ctx[0];
	}

	textbox = new TextBox({ props: textbox_props });
	binding_callbacks.push(() => bind(textbox, 'inputElement', textbox_inputElement_binding));
	binding_callbacks.push(() => bind(textbox, 'containerElement', textbox_containerElement_binding));
	binding_callbacks.push(() => bind(textbox, 'buttonsContainerElement', textbox_buttonsContainerElement_binding));
	binding_callbacks.push(() => bind(textbox, 'clearButtonElement', textbox_clearButtonElement_binding));
	binding_callbacks.push(() => bind(textbox, 'value', textbox_value_binding));
	textbox.$on("outermousedown", /*outermousedown_handler*/ ctx[36]);
	textbox.$on("change", /*change_handler*/ ctx[37]);
	textbox.$on("input", /*input_handler*/ ctx[38]);
	textbox.$on("beforeinput", /*beforeinput_handler*/ ctx[39]);
	textbox.$on("click", /*click_handler*/ ctx[40]);
	textbox.$on("blur", /*blur_handler*/ ctx[41]);
	textbox.$on("focus", /*focus_handler_1*/ ctx[42]);
	textbox.$on("focus", /*focus_handler*/ ctx[43]);
	textbox.$on("dblclick", /*dblclick_handler*/ ctx[44]);
	textbox.$on("contextmenu", /*contextmenu_handler*/ ctx[45]);
	textbox.$on("mousedown", /*mousedown_handler*/ ctx[46]);
	textbox.$on("mouseup", /*mouseup_handler*/ ctx[47]);
	textbox.$on("mouseover", /*mouseover_handler*/ ctx[48]);
	textbox.$on("mouseout", /*mouseout_handler*/ ctx[49]);
	textbox.$on("mouseenter", /*mouseenter_handler*/ ctx[50]);
	textbox.$on("mouseleave", /*mouseleave_handler*/ ctx[51]);
	textbox.$on("keypress", /*keypress_handler*/ ctx[52]);
	textbox.$on("keydown", /*keydown_handler*/ ctx[53]);
	textbox.$on("keyup", /*keyup_handler*/ ctx[54]);
	textbox.$on("clear", /*clear_handler*/ ctx[55]);

	return {
		c() {
			create_component(textbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textbox, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(window, "keydown", /*handleTabKey*/ ctx[20]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			const textbox_changes = (dirty[0] & /*className, min, max, step, disabled, $$restProps*/ 2113024)
			? get_spread_update(textbox_spread_levels, [
					dirty[0] & /*className*/ 8192 && {
						class: "number-box " + (/*className*/ ctx[13] ?? '')
					},
					textbox_spread_levels[1],
					dirty[0] & /*min*/ 512 && { min: /*min*/ ctx[9] },
					dirty[0] & /*max*/ 1024 && { max: /*max*/ ctx[10] },
					dirty[0] & /*step*/ 2048 && { step: /*step*/ ctx[11] },
					dirty[0] & /*disabled*/ 4096 && { disabled: /*disabled*/ ctx[12] },
					dirty[0] & /*$$restProps*/ 2097152 && get_spread_object(/*$$restProps*/ ctx[21])
				])
			: {};

			if (dirty[0] & /*spinDownButtonDisabled, spinDownButtonElement, spinUpButtonDisabled, spinUpButtonElement, disabled, inline, spinnerFlyoutElement, spinnerFlyoutOpen, inputElement*/ 119250 | dirty[1] & /*$$scope*/ 33554432) {
				textbox_changes.$$scope = { dirty, ctx };
			}

			if (!updating_inputElement && dirty[0] & /*inputElement*/ 2) {
				updating_inputElement = true;
				textbox_changes.inputElement = /*inputElement*/ ctx[1];
				add_flush_callback(() => updating_inputElement = false);
			}

			if (!updating_containerElement && dirty[0] & /*containerElement*/ 4) {
				updating_containerElement = true;
				textbox_changes.containerElement = /*containerElement*/ ctx[2];
				add_flush_callback(() => updating_containerElement = false);
			}

			if (!updating_buttonsContainerElement && dirty[0] & /*buttonsContainerElement*/ 8) {
				updating_buttonsContainerElement = true;
				textbox_changes.buttonsContainerElement = /*buttonsContainerElement*/ ctx[3];
				add_flush_callback(() => updating_buttonsContainerElement = false);
			}

			if (!updating_clearButtonElement && dirty[0] & /*clearButtonElement*/ 32) {
				updating_clearButtonElement = true;
				textbox_changes.clearButtonElement = /*clearButtonElement*/ ctx[5];
				add_flush_callback(() => updating_clearButtonElement = false);
			}

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				textbox_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			textbox.$set(textbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textbox, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let spinUpButtonDisabled;
	let spinDownButtonDisabled;

	const omit_props_names = [
		"inline","value","min","max","step","disabled","class","inputElement","containerElement","buttonsContainerElement","spinUpButtonElement","clearButtonElement","spinDownButtonElement","spinnerFlyoutElement","stepUp","stepDown"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { inline = false } = $$props;
	let { value = "" } = $$props;
	let { min = undefined } = $$props;
	let { max = undefined } = $$props;
	let { step = undefined } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	let { buttonsContainerElement = null } = $$props;
	let { spinUpButtonElement = null } = $$props;
	let { clearButtonElement = null } = $$props;
	let { spinDownButtonElement = null } = $$props;
	let { spinnerFlyoutElement = null } = $$props;
	let spinUpTimeout;
	let spinDownTimeout;
	let spinUpInterval;
	let spinDownInterval;
	let spinnerFlyoutOpen = false;

	function spinUp() {
		stepUp();

		spinUpTimeout = setTimeout(
			() => {
				spinUpInterval = setInterval(
					() => {
						stepUp();
					},
					50
				);
			},
			500
		);
	}

	function spinDown() {
		stepDown();

		spinDownTimeout = setTimeout(
			() => {
				spinDownInterval = setInterval(
					() => {
						stepDown();
					},
					50
				);
			},
			500
		);
	}

	function stopSpinIntervals() {
		clearTimeout(spinUpTimeout);
		clearInterval(spinUpInterval);
		clearTimeout(spinDownTimeout);
		clearInterval(spinDownInterval);
	}

	function handleTabKey({ key }) {
		if (key === "Tab") $$invalidate(14, spinnerFlyoutOpen = false);
	}

	function stepUp() {
		inputElement.stepUp();
		$$invalidate(0, value = inputElement.value);
	}

	function stepDown() {
		inputElement.stepDown();
		$$invalidate(0, value = inputElement.value);
	}

	function textboxbutton0_element_binding(value) {
		spinUpButtonElement = value;
		$$invalidate(4, spinUpButtonElement);
	}

	function textboxbutton1_element_binding(value) {
		spinDownButtonElement = value;
		$$invalidate(6, spinDownButtonElement);
	}

	const mousedown_handler_1 = () => inputElement.focus();

	function textboxbutton0_element_binding_1(value) {
		spinUpButtonElement = value;
		$$invalidate(4, spinUpButtonElement);
	}

	function textboxbutton1_element_binding_1(value) {
		spinDownButtonElement = value;
		$$invalidate(6, spinDownButtonElement);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			spinnerFlyoutElement = $$value;
			$$invalidate(7, spinnerFlyoutElement);
		});
	}

	function textbox_inputElement_binding(value) {
		inputElement = value;
		$$invalidate(1, inputElement);
	}

	function textbox_containerElement_binding(value) {
		containerElement = value;
		$$invalidate(2, containerElement);
	}

	function textbox_buttonsContainerElement_binding(value) {
		buttonsContainerElement = value;
		$$invalidate(3, buttonsContainerElement);
	}

	function textbox_clearButtonElement_binding(value) {
		clearButtonElement = value;
		$$invalidate(5, clearButtonElement);
	}

	function textbox_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const outermousedown_handler = () => $$invalidate(14, spinnerFlyoutOpen = false);

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function beforeinput_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const focus_handler_1 = () => $$invalidate(14, spinnerFlyoutOpen = true);

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dblclick_handler(event) {
		bubble.call(this, $$self, event);
	}

	function contextmenu_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mousedown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseout_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(21, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('inline' in $$new_props) $$invalidate(8, inline = $$new_props.inline);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('min' in $$new_props) $$invalidate(9, min = $$new_props.min);
		if ('max' in $$new_props) $$invalidate(10, max = $$new_props.max);
		if ('step' in $$new_props) $$invalidate(11, step = $$new_props.step);
		if ('disabled' in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(13, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(2, containerElement = $$new_props.containerElement);
		if ('buttonsContainerElement' in $$new_props) $$invalidate(3, buttonsContainerElement = $$new_props.buttonsContainerElement);
		if ('spinUpButtonElement' in $$new_props) $$invalidate(4, spinUpButtonElement = $$new_props.spinUpButtonElement);
		if ('clearButtonElement' in $$new_props) $$invalidate(5, clearButtonElement = $$new_props.clearButtonElement);
		if ('spinDownButtonElement' in $$new_props) $$invalidate(6, spinDownButtonElement = $$new_props.spinDownButtonElement);
		if ('spinnerFlyoutElement' in $$new_props) $$invalidate(7, spinnerFlyoutElement = $$new_props.spinnerFlyoutElement);
		if ('$$scope' in $$new_props) $$invalidate(56, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, max, min*/ 1537) {
			$: if ((value === null || value === void 0
			? void 0
			: value.toString()) === (max === null || max === void 0 ? void 0 : max.toString()) || (value === null || value === void 0
			? void 0
			: value.toString()) === (min === null || min === void 0 ? void 0 : min.toString())) stopSpinIntervals();
		}

		if ($$self.$$.dirty[0] & /*disabled, value, max*/ 5121) {
			$: $$invalidate(16, spinUpButtonDisabled = disabled || (value === null || value === void 0
			? void 0
			: value.toString()) === (max === null || max === void 0 ? void 0 : max.toString()));
		}

		if ($$self.$$.dirty[0] & /*disabled, value, min*/ 4609) {
			$: $$invalidate(15, spinDownButtonDisabled = disabled || (value === null || value === void 0
			? void 0
			: value.toString()) === (min === null || min === void 0 ? void 0 : min.toString()));
		}
	};

	return [
		value,
		inputElement,
		containerElement,
		buttonsContainerElement,
		spinUpButtonElement,
		clearButtonElement,
		spinDownButtonElement,
		spinnerFlyoutElement,
		inline,
		min,
		max,
		step,
		disabled,
		className,
		spinnerFlyoutOpen,
		spinDownButtonDisabled,
		spinUpButtonDisabled,
		spinUp,
		spinDown,
		stopSpinIntervals,
		handleTabKey,
		$$restProps,
		stepUp,
		stepDown,
		slots,
		textboxbutton0_element_binding,
		textboxbutton1_element_binding,
		mousedown_handler_1,
		textboxbutton0_element_binding_1,
		textboxbutton1_element_binding_1,
		div_binding,
		textbox_inputElement_binding,
		textbox_containerElement_binding,
		textbox_buttonsContainerElement_binding,
		textbox_clearButtonElement_binding,
		textbox_value_binding,
		outermousedown_handler,
		change_handler,
		input_handler,
		beforeinput_handler,
		click_handler,
		blur_handler,
		focus_handler_1,
		focus_handler,
		dblclick_handler,
		contextmenu_handler,
		mousedown_handler,
		mouseup_handler,
		mouseover_handler,
		mouseout_handler,
		mouseenter_handler,
		mouseleave_handler,
		keypress_handler,
		keydown_handler,
		keyup_handler,
		clear_handler,
		$$scope
	];
}

class NumberBox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				inline: 8,
				value: 0,
				min: 9,
				max: 10,
				step: 11,
				disabled: 12,
				class: 13,
				inputElement: 1,
				containerElement: 2,
				buttonsContainerElement: 3,
				spinUpButtonElement: 4,
				clearButtonElement: 5,
				spinDownButtonElement: 6,
				spinnerFlyoutElement: 7,
				stepUp: 22,
				stepDown: 23
			},
			add_css,
			[-1, -1]
		);
	}

	get stepUp() {
		return this.$$.ctx[22];
	}

	get stepDown() {
		return this.$$.ctx[23];
	}
}

export default NumberBox;