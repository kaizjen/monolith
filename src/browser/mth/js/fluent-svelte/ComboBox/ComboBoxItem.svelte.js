/* $svelte\fluent-svelte-raw\ComboBox\ComboBoxItem.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	append_styles,
	assign,
	attr,
	compute_rest_props,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { createEventForwarder } from "../internal";
import { get_current_component } from "mth://.svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-and1le", ".combo-box-item.svelte-and1le.svelte-and1le{align-items:center;background-color:var(--fds-subtle-fill-transparent);block-size:32px;border-radius:var(--fds-control-corner-radius);box-sizing:border-box;color:var(--fds-text-primary);cursor:default;display:flex;flex:0 0 auto;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;margin:4px;outline:none;padding:0 11px;position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.combo-box-item.svelte-and1le.svelte-and1le:before{background-color:var(--fds-accent-default);block-size:0;border-radius:3px;content:\"\";inline-size:3px;inset-inline-start:0;opacity:0;position:absolute;transition:transform var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing)}.combo-box-item.svelte-and1le.svelte-and1le:focus-visible{box-shadow:var(--fds-focus-stroke)}.combo-box-item.selected.svelte-and1le.svelte-and1le,.combo-box-item.svelte-and1le.svelte-and1le:hover{background-color:var(--fds-subtle-fill-secondary)}.combo-box-item.svelte-and1le.svelte-and1le:active{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-secondary)}.combo-box-item.svelte-and1le.svelte-and1le:active:before{transform:scaleY(.625)}.combo-box-item.disabled.svelte-and1le.svelte-and1le{background-color:var(--fds-subtle-fill-transparent);color:var(--fds-text-disabled);pointer-events:none}.combo-box-item.disabled.selected.svelte-and1le.svelte-and1le{background-color:var(--fds-subtle-fill-secondary)}.combo-box-item.disabled.selected.svelte-and1le.svelte-and1le:before{background-color:var(--fds-accent-disabled)}.combo-box-item.selected.svelte-and1le.svelte-and1le:before{block-size:16px;opacity:1}.combo-box-item.svelte-and1le>span.svelte-and1le{flex:1 1 auto;max-inline-size:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.combo-box-item.svelte-and1le>svg{fill:currentColor;-webkit-margin-end:16px;block-size:auto;inline-size:16px;margin-inline-end:16px}");
}

const get_icon_slot_changes = dirty => ({});
const get_icon_slot_context = ctx => ({});

function create_fragment(ctx) {
	let li;
	let t;
	let span;
	let li_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const icon_slot_template = /*#slots*/ ctx[6].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[5], get_icon_slot_context);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	let li_levels = [
		{ tabindex: "0" },
		{
			class: li_class_value = "combo-box-item " + /*className*/ ctx[2]
		},
		/*$$restProps*/ ctx[4]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if (icon_slot) icon_slot.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-and1le");
			set_attributes(li, li_data);
			toggle_class(li, "selected", /*selected*/ ctx[0]);
			toggle_class(li, "disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "svelte-and1le", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (icon_slot) {
				icon_slot.m(li, null);
			}

			append(li, t);
			append(li, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[3].call(null, li));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[5], dirty, get_icon_slot_changes),
						get_icon_slot_context
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ tabindex: "0" },
				(!current || dirty & /*className*/ 4 && li_class_value !== (li_class_value = "combo-box-item " + /*className*/ ctx[2])) && { class: li_class_value },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(li, "selected", /*selected*/ ctx[0]);
			toggle_class(li, "disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "svelte-and1le", true);
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (icon_slot) icon_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","disabled","class"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [selected, disabled, className, forwardEvents, $$restProps, $$scope, slots];
}

class ComboBoxItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 0, disabled: 1, class: 2 }, add_css);
	}
}

export default ComboBoxItem;