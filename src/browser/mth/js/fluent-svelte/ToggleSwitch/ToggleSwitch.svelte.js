/* $svelte\fluent-svelte-raw\ToggleSwitch\ToggleSwitch.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { get_current_component } from "mth://.svelte/internal";
import { createEventForwarder } from "../internal";

function add_css(target) {
	append_styles(target, "svelte-16ydm79", ".toggle-switch.svelte-16ydm79.svelte-16ydm79{align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--fds-control-alt-fill-secondary);block-size:20px;border:1px solid var(--fds-control-strong-stroke-default);border-radius:20px;display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:40px;line-height:20px;margin:0;outline:none;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.toggle-switch.svelte-16ydm79.svelte-16ydm79:before{background-color:var(--fds-text-secondary);block-size:12px;border-radius:7px;content:\"\";inline-size:12px;inset-inline-start:3px;position:absolute;transition:var(--fds-control-fast-duration) ease-in-out transform,var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing) height,var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing) width,var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing) margin,var(--fds-control-faster-duration) linear background}.toggle-switch.svelte-16ydm79.svelte-16ydm79:focus-visible{box-shadow:var(--fds-focus-stroke)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:hover{background-color:var(--fds-control-alt-fill-tertiary)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:hover:before{block-size:14px;inline-size:14px}.toggle-switch.svelte-16ydm79.svelte-16ydm79:active{background-color:var(--fds-control-alt-fill-quarternary)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:active:before{block-size:14px;inline-size:17px}.toggle-switch.svelte-16ydm79.svelte-16ydm79:disabled{background-color:var(--fds-control-alt-fill-disabled);border-color:var(--fds-control-strong-stroke-disabled)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:disabled:before{background-color:var(--fds-text-disabled);block-size:12px;box-shadow:none;inline-size:12px;margin:0!important}.toggle-switch.svelte-16ydm79:disabled+span.svelte-16ydm79{color:var(--fds-text-disabled)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked{background-color:var(--fds-accent-default);border:none}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:before{background-color:var(--fds-text-on-accent-primary);box-shadow:0 0 0 1px solid var(--fds-control-stroke-default);transform:translateX(20px)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:hover{background-color:var(--fds-accent-secondary)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:hover:before{-webkit-margin-start:-1px;margin-inline-start:-1px}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:active{background-color:var(--fds-accent-tertiary)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:active:before{-webkit-margin-start:-4px;margin-inline-start:-4px}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:disabled{background-color:var(--fds-accent-disabled)}.toggle-switch.svelte-16ydm79.svelte-16ydm79:checked:disabled:before{background-color:var(--fds-text-on-accent-disabled);box-shadow:none}.toggle-switch-container.svelte-16ydm79.svelte-16ydm79{align-items:center;color:var(--fds-text-primary);display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;min-block-size:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.toggle-switch-container.svelte-16ydm79>span.svelte-16ydm79{-webkit-padding-start:8px;padding-inline-start:8px}");
}

// (38:1) {#if $$slots.default}
function create_if_block(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-16ydm79");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let label;
	let input;
	let input_class_value;
	let forwardEvents_action;
	let t;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{
			class: input_class_value = "toggle-switch " + /*className*/ ctx[5]
		},
		{ type: "checkbox" },
		{ __value: /*value*/ ctx[3] },
		{ disabled: /*disabled*/ ctx[4] },
		/*$$restProps*/ ctx[7]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block = /*$$slots*/ ctx[8].default && create_if_block(ctx);

	return {
		c() {
			label = element("label");
			input = element("input");
			t = space();
			if (if_block) if_block.c();
			set_attributes(input, input_data);
			toggle_class(input, "svelte-16ydm79", true);
			attr(label, "class", "toggle-switch-container svelte-16ydm79");
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			if (input.autofocus) input.focus();
			input.checked = /*checked*/ ctx[0];
			/*input_binding*/ ctx[12](input);
			append(label, t);
			if (if_block) if_block.m(label, null);
			/*label_binding*/ ctx[13](label);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[6].call(null, input)),
					listen(input, "change", /*input_change_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty & /*className*/ 32 && input_class_value !== (input_class_value = "toggle-switch " + /*className*/ ctx[5])) && { class: input_class_value },
				{ type: "checkbox" },
				(!current || dirty & /*value*/ 8) && { __value: /*value*/ ctx[3] },
				(!current || dirty & /*disabled*/ 16) && { disabled: /*disabled*/ ctx[4] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			toggle_class(input, "svelte-16ydm79", true);

			if (/*$$slots*/ ctx[8].default) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			/*input_binding*/ ctx[12](null);
			if (if_block) if_block.d();
			/*label_binding*/ ctx[13](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","value","disabled","class","inputElement","containerElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { checked = false } = $$props;
	let { value = undefined } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function label_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(2, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(2, containerElement = $$new_props.containerElement);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		checked,
		inputElement,
		containerElement,
		value,
		disabled,
		className,
		forwardEvents,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		input_change_handler,
		input_binding,
		label_binding
	];
}

class ToggleSwitch extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				checked: 0,
				value: 3,
				disabled: 4,
				class: 5,
				inputElement: 1,
				containerElement: 2
			},
			add_css
		);
	}
}

export default ToggleSwitch;