/* $svelte\fluent-svelte-raw\Expander\Expander.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	svg_element,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { createEventDispatcher } from "mth://.svelte/internal";
import { get_current_component } from "mth://.svelte/internal";
import { createEventForwarder, uid } from "../internal";

function add_css(target) {
	append_styles(target, "svelte-1p16tfx", ".expander.svelte-1p16tfx.svelte-1p16tfx{border-radius:var(--fds-control-corner-radius);color:var(--fds-text-primary);display:flex;flex-direction:column;inline-size:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.expander.direction-down.svelte-1p16tfx .expander-content.svelte-1p16tfx{-webkit-border-before:none;border-block-start:none;border-radius:var(--fds-control-corner-radius);border-start-end-radius:0;border-start-start-radius:0;transform:translateY(-100%)}.expander.direction-down.expanded.svelte-1p16tfx .expander-header.svelte-1p16tfx{border-end-end-radius:0;border-end-start-radius:0;border-radius:var(--fds-control-corner-radius)}.expander.direction-up.svelte-1p16tfx .expander-content.svelte-1p16tfx{border-bottom:none;border-end-end-radius:0;border-end-start-radius:0;border-radius:var(--fds-control-corner-radius);transform:translateY(100%)}.expander.direction-up.svelte-1p16tfx .expander-content-anchor.svelte-1p16tfx{order:-1}.expander.direction-up.expanded.svelte-1p16tfx .expander-header.svelte-1p16tfx{border-radius:var(--fds-control-corner-radius);border-start-end-radius:0;border-start-start-radius:0}.expander.expanded.svelte-1p16tfx .expander-content.svelte-1p16tfx{transform:none;transition:var(--fds-control-slow-duration) var(--fds-control-fast-out-slow-in-easing) transform}.expander.expanded.svelte-1p16tfx .expander-content-anchor.svelte-1p16tfx{max-block-size:6.019999999999999e+23vmax;transition:none}.expander.expanded.svelte-1p16tfx .expander-chevron svg.svelte-1p16tfx{transform:rotate(180deg)}.expander.svelte-1p16tfx>h3.svelte-1p16tfx{display:contents}.expander-icon.svelte-1p16tfx.svelte-1p16tfx{-webkit-margin-end:16px;block-size:16px;color:var(--fds-text-primary);flex:0 0 auto;inline-size:16px;margin-inline-end:16px}.expander-icon.svelte-1p16tfx>svg{fill:currentColor;block-size:auto;inline-size:16px}.expander-header.svelte-1p16tfx.svelte-1p16tfx{-webkit-padding-start:16px;align-items:center;background-clip:padding-box;background-color:var(--fds-card-background-default);border:1px solid var(--fds-card-stroke-default);border-radius:var(--fds-control-corner-radius);box-sizing:border-box;display:flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;outline:none;padding:8px;padding-inline-start:16px;text-align:start;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.expander-header-title.svelte-1p16tfx.svelte-1p16tfx{flex:1 1 auto}.expander-header.svelte-1p16tfx.svelte-1p16tfx:focus-visible{box-shadow:var(--fds-focus-stroke)}.expander-header.svelte-1p16tfx:hover .expander-chevron.svelte-1p16tfx{background-color:var(--fds-subtle-fill-secondary)}.expander-header.svelte-1p16tfx:active .expander-chevron.svelte-1p16tfx{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-secondary)}.expander-chevron.svelte-1p16tfx.svelte-1p16tfx{-webkit-margin-start:20px;align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--fds-subtle-fill-transparent);block-size:32px;border:none;border-radius:var(--fds-control-corner-radius);color:var(--fds-text-primary);display:flex;flex:0 0 auto;inline-size:32px;justify-content:center;margin-inline-start:20px;outline:none}.expander-chevron.svelte-1p16tfx.svelte-1p16tfx:focus-visible{box-shadow:var(--fds-focus-stroke)}.expander-chevron.svelte-1p16tfx svg.svelte-1p16tfx{fill:currentColor;block-size:12px;inline-size:12px;transition:calc(var(--fds-control-faster-duration)*1.2) linear transform var(--fds-control-faster-duration)}.expander-content.svelte-1p16tfx.svelte-1p16tfx{background-clip:padding-box;background-color:var(--fds-card-background-secondary);border:1px solid var(--fds-card-stroke-default);font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;padding:16px;transition:var(--fds-control-fast-duration) cubic-bezier(1,1,0,1) transform;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.expander-content-anchor.svelte-1p16tfx.svelte-1p16tfx{max-height:0;overflow:hidden;position:relative;transition:0ms linear var(--fds-control-slow-duration) max-height}");
}

const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_icon_slot_changes = dirty => ({});
const get_icon_slot_context = ctx => ({});

// (69:3) {#if $$slots.icon}
function create_if_block_1(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[13].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[12], get_icon_slot_context);

	return {
		c() {
			div = element("div");
			if (icon_slot) icon_slot.c();
			attr(div, "class", "expander-icon svelte-1p16tfx");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot) {
				icon_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[12], dirty, get_icon_slot_changes),
						get_icon_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot) icon_slot.d(detaching);
		}
	};
}

// (89:5) {:else}
function create_else_block(ctx) {
	let path;

	return {
		c() {
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M2.14645 7.35355C2.34171 7.54882 2.65829 7.54882 2.85355 7.35355L6 4.20711L9.14645 7.35355C9.34171 7.54882 9.65829 7.54882 9.85355 7.35355C10.0488 7.15829 10.0488 6.84171 9.85355 6.64645L6.35355 3.14645C6.15829 2.95118 5.84171 2.95118 5.64645 3.14645L2.14645 6.64645C1.95118 6.84171 1.95118 7.15829 2.14645 7.35355Z");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

// (84:5) {#if direction === "down"}
function create_if_block(ctx) {
	let path;

	return {
		c() {
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M2.14645 4.64645C2.34171 4.45118 2.65829 4.45118 2.85355 4.64645L6 7.79289L9.14645 4.64645C9.34171 4.45118 9.65829 4.45118 9.85355 4.64645C10.0488 4.84171 10.0488 5.15829 9.85355 5.35355L6.35355 8.85355C6.15829 9.04882 5.84171 9.04882 5.64645 8.85355L2.14645 5.35355C1.95118 5.15829 1.95118 4.84171 2.14645 4.64645Z");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let h3;
	let div0;
	let t0;
	let span;
	let t1;
	let button;
	let svg;
	let t2;
	let div2;
	let div1;
	let div3_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*$$slots*/ ctx[11].icon && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	function select_block_type(ctx, dirty) {
		if (/*direction*/ ctx[4] === "down") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);
	const content_slot_template = /*#slots*/ ctx[13].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[12], get_content_slot_context);

	let div3_levels = [
		{
			class: div3_class_value = "expander direction-" + /*direction*/ ctx[4] + " " + /*className*/ ctx[5]
		},
		{ role: "region" },
		/*$$restProps*/ ctx[10]
	];

	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			h3 = element("h3");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			span = element("span");
			if (default_slot) default_slot.c();
			t1 = space();
			button = element("button");
			svg = svg_element("svg");
			if_block1.c();
			t2 = space();
			div2 = element("div");
			div1 = element("div");
			if (content_slot) content_slot.c();
			attr(span, "class", "expander-header-title svelte-1p16tfx");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "12");
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 12 12");
			attr(svg, "class", "svelte-1p16tfx");
			attr(button, "class", "expander-chevron svelte-1p16tfx");
			attr(button, "tabindex", "-1");
			attr(button, "id", /*contentId*/ ctx[8]);
			attr(button, "aria-labelledby", /*headerId*/ ctx[7]);
			attr(div0, "role", "button");
			attr(div0, "id", /*headerId*/ ctx[7]);
			attr(div0, "aria-controls", /*contentId*/ ctx[8]);
			attr(div0, "class", "expander-header svelte-1p16tfx");
			attr(div0, "aria-expanded", /*expanded*/ ctx[0]);
			attr(div0, "tabindex", "0");
			attr(h3, "class", "svelte-1p16tfx");
			attr(div1, "class", "expander-content svelte-1p16tfx");
			attr(div2, "class", "expander-content-anchor svelte-1p16tfx");
			set_attributes(div3, div3_data);
			toggle_class(div3, "expanded", /*expanded*/ ctx[0]);
			toggle_class(div3, "svelte-1p16tfx", true);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, h3);
			append(h3, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			append(div0, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append(div0, t1);
			append(div0, button);
			append(button, svg);
			if_block1.m(svg, null);
			/*div0_binding*/ ctx[14](div0);
			append(div3, t2);
			append(div3, div2);
			append(div2, div1);

			if (content_slot) {
				content_slot.m(div1, null);
			}

			/*div1_binding*/ ctx[16](div1);
			/*div3_binding*/ ctx[17](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "keydown", /*handleKeydown*/ ctx[9]),
					listen(div0, "click", /*click_handler*/ ctx[15]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[6].call(null, div3))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[11].icon) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$$slots*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(svg, null);
				}
			}

			if (!current || dirty & /*expanded*/ 1) {
				attr(div0, "aria-expanded", /*expanded*/ ctx[0]);
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[12], dirty, get_content_slot_changes),
						get_content_slot_context
					);
				}
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				(!current || dirty & /*direction, className*/ 48 && div3_class_value !== (div3_class_value = "expander direction-" + /*direction*/ ctx[4] + " " + /*className*/ ctx[5])) && { class: div3_class_value },
				{ role: "region" },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div3, "expanded", /*expanded*/ ctx[0]);
			toggle_class(div3, "svelte-1p16tfx", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if_block1.d();
			/*div0_binding*/ ctx[14](null);
			if (content_slot) content_slot.d(detaching);
			/*div1_binding*/ ctx[16](null);
			/*div3_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"expanded","direction","class","containerElement","headerElement","contentElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { expanded = false } = $$props;
	let { direction = "down" } = $$props;
	let { class: className = "" } = $$props;
	let { containerElement = null } = $$props;
	let { headerElement = null } = $$props;
	let { contentElement = null } = $$props;
	const dispatch = createEventDispatcher();
	const forwardEvents = createEventForwarder(get_current_component(), ["expand", "collapse"]);
	const headerId = uid("fds-expander-header-");
	const contentId = uid("fds-expander-content-");

	function handleKeydown({ key }) {
		if (key === "Enter" || key === " ") {
			event.preventDefault();
			$$invalidate(0, expanded = !expanded);
		}
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			headerElement = $$value;
			$$invalidate(2, headerElement);
		});
	}

	const click_handler = () => $$invalidate(0, expanded = !expanded);

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			contentElement = $$value;
			$$invalidate(3, contentElement);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(1, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('direction' in $$new_props) $$invalidate(4, direction = $$new_props.direction);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('containerElement' in $$new_props) $$invalidate(1, containerElement = $$new_props.containerElement);
		if ('headerElement' in $$new_props) $$invalidate(2, headerElement = $$new_props.headerElement);
		if ('contentElement' in $$new_props) $$invalidate(3, contentElement = $$new_props.contentElement);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expanded*/ 1) {
			$: if (expanded) {
				dispatch("expand");
			} else {
				dispatch("collapse");
			}
		}
	};

	return [
		expanded,
		containerElement,
		headerElement,
		contentElement,
		direction,
		className,
		forwardEvents,
		headerId,
		contentId,
		handleKeydown,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		div0_binding,
		click_handler,
		div1_binding,
		div3_binding
	];
}

class Expander extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				expanded: 0,
				direction: 4,
				class: 5,
				containerElement: 1,
				headerElement: 2,
				contentElement: 3
			},
			add_css
		);
	}
}

export default Expander;