/* $svelte\fluent-svelte-raw\ProgressBar\ProgressBar.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	detach,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_svg_attributes,
	svg_element,
	toggle_class
} from "mth://.svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-1jjv56o", "@-webkit-keyframes svelte-1jjv56o-indeterminate-1{0%{opacity:1;transform:translateX(-100%)}75%{opacity:1;transform:translateX(300%)}75.01%{opacity:0}to{opacity:0;transform:translateX(300%)}}@keyframes svelte-1jjv56o-indeterminate-1{0%{opacity:1;transform:translateX(-100%)}75%{opacity:1;transform:translateX(300%)}75.01%{opacity:0}to{opacity:0;transform:translateX(300%)}}@-webkit-keyframes svelte-1jjv56o-indeterminate-2{0%{opacity:0;transform:translateX(-150%)}37.49%{opacity:0}37.5%{opacity:1;transform:translateX(-150%)}to{opacity:1;transform:translateX(166.66%)}}@keyframes svelte-1jjv56o-indeterminate-2{0%{opacity:0;transform:translateX(-150%)}37.49%{opacity:0}37.5%{opacity:1;transform:translateX(-150%)}to{opacity:1;transform:translateX(166.66%)}}.progress-bar.svelte-1jjv56o.svelte-1jjv56o{align-items:center;display:flex;min-block-size:3px;width:100%}.progress-bar-track.svelte-1jjv56o.svelte-1jjv56o{fill:var(--fds-accent-default);height:3px;max-width:50%;transition:var(--fds-control-fast-duration) linear fill}.progress-bar-rail.svelte-1jjv56o.svelte-1jjv56o{fill:var(--fds-control-strong-stroke-default);height:1px;width:100%}.progress-bar.indeterminate.svelte-1jjv56o .progress-bar-rail.svelte-1jjv56o{display:none}.progress-bar.indeterminate.svelte-1jjv56o .progress-bar-track.svelte-1jjv56o{-webkit-animation-timing-function:cubic-bezier(.4,0,.6,1);animation-timing-function:cubic-bezier(.4,0,.6,1)}.progress-bar.indeterminate.svelte-1jjv56o .progress-bar-track.svelte-1jjv56o:first-of-type{-webkit-animation:svelte-1jjv56o-indeterminate-1 2s infinite;animation:svelte-1jjv56o-indeterminate-1 2s infinite;width:40%}.progress-bar.indeterminate.svelte-1jjv56o .progress-bar-track.svelte-1jjv56o:nth-of-type(2){-webkit-animation:svelte-1jjv56o-indeterminate-2 2s infinite;animation:svelte-1jjv56o-indeterminate-2 2s infinite;width:60%}");
}

// (39:1) {:else}
function create_else_block(ctx) {
	let rect;

	return {
		c() {
			rect = svg_element("rect");
			attr(rect, "height", "3");
			attr(rect, "ry", "3");
			attr(rect, "class", "progress-bar-track svelte-1jjv56o");
		},
		m(target, anchor) {
			insert(target, rect, anchor);
			/*rect_binding_1*/ ctx[8](rect);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(rect);
			/*rect_binding_1*/ ctx[8](null);
		}
	};
}

// (30:1) {#if value}
function create_if_block(ctx) {
	let rect;

	return {
		c() {
			rect = svg_element("rect");
			attr(rect, "height", "1");
			attr(rect, "rx", "0.5");
			attr(rect, "y", "1");
			attr(rect, "width", "100%");
			attr(rect, "class", "progress-bar-rail svelte-1jjv56o");
		},
		m(target, anchor) {
			insert(target, rect, anchor);
			/*rect_binding*/ ctx[7](rect);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(rect);
			/*rect_binding*/ ctx[7](null);
		}
	};
}

function create_fragment(ctx) {
	let svg;
	let rect;
	let rect_width_value;
	let svg_class_value;
	let svg_aria_valuemin_value;
	let svg_aria_valuemax_value;

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[4]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	let svg_levels = [
		{
			class: svg_class_value = "progress-bar " + /*className*/ ctx[5]
		},
		{ role: "progressbar" },
		{ width: "100%" },
		{ height: "3" },
		{
			"aria-valuemin": svg_aria_valuemin_value = /*value*/ ctx[4] ? 0 : undefined
		},
		{
			"aria-valuemax": svg_aria_valuemax_value = /*value*/ ctx[4] ? 100 : undefined
		},
		{ "aria-valuenow": /*value*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if_block.c();
			rect = svg_element("rect");
			attr(rect, "width", rect_width_value = /*value*/ ctx[4] ? `${/*value*/ ctx[4]}%` : undefined);
			attr(rect, "height", "3");
			attr(rect, "rx", "1.5");
			attr(rect, "class", "progress-bar-track svelte-1jjv56o");
			set_svg_attributes(svg, svg_data);
			toggle_class(svg, "indeterminate", !/*value*/ ctx[4]);
			toggle_class(svg, "svelte-1jjv56o", true);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if_block.m(svg, null);
			append(svg, rect);
			/*rect_binding_2*/ ctx[9](rect);
			/*svg_binding*/ ctx[10](svg);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(svg, rect);
				}
			}

			if (dirty & /*value*/ 16 && rect_width_value !== (rect_width_value = /*value*/ ctx[4] ? `${/*value*/ ctx[4]}%` : undefined)) {
				attr(rect, "width", rect_width_value);
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				dirty & /*className*/ 32 && svg_class_value !== (svg_class_value = "progress-bar " + /*className*/ ctx[5]) && { class: svg_class_value },
				{ role: "progressbar" },
				{ width: "100%" },
				{ height: "3" },
				dirty & /*value*/ 16 && svg_aria_valuemin_value !== (svg_aria_valuemin_value = /*value*/ ctx[4] ? 0 : undefined) && { "aria-valuemin": svg_aria_valuemin_value },
				dirty & /*value*/ 16 && svg_aria_valuemax_value !== (svg_aria_valuemax_value = /*value*/ ctx[4] ? 100 : undefined) && { "aria-valuemax": svg_aria_valuemax_value },
				dirty & /*value*/ 16 && { "aria-valuenow": /*value*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(svg, "indeterminate", !/*value*/ ctx[4]);
			toggle_class(svg, "svelte-1jjv56o", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if_block.d();
			/*rect_binding_2*/ ctx[9](null);
			/*svg_binding*/ ctx[10](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","class","element","railElement","trackElement","secondaryTrackElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = undefined } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { railElement = null } = $$props;
	let { trackElement = null } = $$props;
	let { secondaryTrackElement = null } = $$props;

	function rect_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			railElement = $$value;
			$$invalidate(1, railElement);
		});
	}

	function rect_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			secondaryTrackElement = $$value;
			$$invalidate(3, secondaryTrackElement);
		});
	}

	function rect_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			trackElement = $$value;
			$$invalidate(2, trackElement);
		});
	}

	function svg_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('railElement' in $$new_props) $$invalidate(1, railElement = $$new_props.railElement);
		if ('trackElement' in $$new_props) $$invalidate(2, trackElement = $$new_props.trackElement);
		if ('secondaryTrackElement' in $$new_props) $$invalidate(3, secondaryTrackElement = $$new_props.secondaryTrackElement);
	};

	return [
		element,
		railElement,
		trackElement,
		secondaryTrackElement,
		value,
		className,
		$$restProps,
		rect_binding,
		rect_binding_1,
		rect_binding_2,
		svg_binding
	];
}

class ProgressBar extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				value: 4,
				class: 5,
				element: 0,
				railElement: 1,
				trackElement: 2,
				secondaryTrackElement: 3
			},
			add_css
		);
	}
}

export default ProgressBar;