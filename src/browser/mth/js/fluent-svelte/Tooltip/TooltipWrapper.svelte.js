/* $svelte\fluent-svelte-raw\Tooltip\TooltipWrapper.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	append_styles,
	assign,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_in_transition,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { onMount } from "mth://.svelte/internal";
import { fade } from "mth://.svelte/transition";
import { getCSSDuration } from "../internal";
import TooltipSurface from "./TooltipSurface.svelte";

function add_css(target) {
	append_styles(target, "svelte-e2a5n0", ".tooltip-wrapper.svelte-e2a5n0{display:block;position:relative}.tooltip-anchor.svelte-e2a5n0{pointer-events:none;position:absolute;z-index:100}.tooltip-anchor.placement-top.svelte-e2a5n0{bottom:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-bottom.svelte-e2a5n0{top:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-left.svelte-e2a5n0{right:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-right.svelte-e2a5n0{left:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-bottom.alignment-start.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-start.svelte-e2a5n0{inset-inline-start:0}.tooltip-anchor.placement-bottom.alignment-end.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-end.svelte-e2a5n0{inset-inline-end:0}.tooltip-anchor.placement-bottom.alignment-center.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-center.svelte-e2a5n0{inset-inline-start:50%;transform:translateX(-50%)}.tooltip-anchor.placement-left.alignment-start.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-start.svelte-e2a5n0{inset-block-start:0}.tooltip-anchor.placement-left.alignment-end.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-end.svelte-e2a5n0{inset-block-end:0}.tooltip-anchor.placement-left.alignment-center.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-center.svelte-e2a5n0{inset-block-start:50%;transform:translateY(-50%)}.tooltip-anchor.placement-auto.svelte-e2a5n0{transform:translateY(-100%)}.tooltip-anchor.placement-auto.alignment-center.svelte-e2a5n0{transform:translate(-50%,-100%)}.tooltip-anchor.placement-auto.alignment-end.svelte-e2a5n0{transform:translate(-100%,-100%)}");
}

const get_tooltip_slot_changes = dirty => ({});
const get_tooltip_slot_context = ctx => ({});

// (77:1) {#if visible}
function create_if_block(ctx) {
	let div;
	let tooltipsurface;
	let updating_element;
	let div_class_value;
	let div_style_value;
	let div_intro;
	let current;
	const tooltipsurface_spread_levels = [/*$$restProps*/ ctx[15]];

	function tooltipsurface_element_binding(value) {
		/*tooltipsurface_element_binding*/ ctx[19](value);
	}

	let tooltipsurface_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tooltipsurface_spread_levels.length; i += 1) {
		tooltipsurface_props = assign(tooltipsurface_props, tooltipsurface_spread_levels[i]);
	}

	if (/*tooltipElement*/ ctx[1] !== void 0) {
		tooltipsurface_props.element = /*tooltipElement*/ ctx[1];
	}

	tooltipsurface = new TooltipSurface({ props: tooltipsurface_props });
	binding_callbacks.push(() => bind(tooltipsurface, 'element', tooltipsurface_element_binding));

	return {
		c() {
			div = element("div");
			create_component(tooltipsurface.$$.fragment);
			attr(div, "class", div_class_value = "tooltip-anchor placement-" + /*placement*/ ctx[6] + " alignment-" + /*alignment*/ ctx[7] + " svelte-e2a5n0");

			attr(div, "style", div_style_value = "" + ((/*placement*/ ctx[6] === 'auto'
			? `top: calc(${/*currentPosition*/ ctx[10].y}px - var(--fds-tooltip-offset));
				   left: ${/*currentPosition*/ ctx[10].x}px;`
			: '') + " --fds-tooltip-offset: " + /*offset*/ ctx[5] + "px"));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(tooltipsurface, div, null);
			/*div_binding*/ ctx[20](div);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			const tooltipsurface_changes = (dirty & /*$$restProps*/ 32768)
			? get_spread_update(tooltipsurface_spread_levels, [get_spread_object(/*$$restProps*/ ctx[15])])
			: {};

			if (dirty & /*$$scope, text*/ 8388624) {
				tooltipsurface_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty & /*tooltipElement*/ 2) {
				updating_element = true;
				tooltipsurface_changes.element = /*tooltipElement*/ ctx[1];
				add_flush_callback(() => updating_element = false);
			}

			tooltipsurface.$set(tooltipsurface_changes);

			if (!current || dirty & /*placement, alignment*/ 192 && div_class_value !== (div_class_value = "tooltip-anchor placement-" + /*placement*/ ctx[6] + " alignment-" + /*alignment*/ ctx[7] + " svelte-e2a5n0")) {
				attr(div, "class", div_class_value);
			}

			if (!current || dirty & /*placement, currentPosition, offset*/ 1120 && div_style_value !== (div_style_value = "" + ((/*placement*/ ctx[6] === 'auto'
			? `top: calc(${/*currentPosition*/ ctx[10].y}px - var(--fds-tooltip-offset));
				   left: ${/*currentPosition*/ ctx[10].x}px;`
			: '') + " --fds-tooltip-offset: " + /*offset*/ ctx[5] + "px"))) {
				attr(div, "style", div_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(tooltipsurface.$$.fragment, local);

			if (local) {
				if (!div_intro) {
					add_render_callback(() => {
						div_intro = create_in_transition(div, fade, {
							duration: getCSSDuration("--fds-control-fast-duration")
						});

						div_intro.start();
					});
				}
			}

			current = true;
		},
		o(local) {
			transition_out(tooltipsurface.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(tooltipsurface);
			/*div_binding*/ ctx[20](null);
		}
	};
}

// (87:3) <TooltipSurface bind:element={tooltipElement} {...$$restProps}>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;
	const tooltip_slot_template = /*#slots*/ ctx[18].tooltip;
	const tooltip_slot = create_slot(tooltip_slot_template, ctx, /*$$scope*/ ctx[23], get_tooltip_slot_context);

	return {
		c() {
			t0 = text_1(/*text*/ ctx[4]);
			t1 = space();
			if (tooltip_slot) tooltip_slot.c();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);

			if (tooltip_slot) {
				tooltip_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*text*/ 16) set_data(t0, /*text*/ ctx[4]);

			if (tooltip_slot) {
				if (tooltip_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						tooltip_slot,
						tooltip_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(tooltip_slot_template, /*$$scope*/ ctx[23], dirty, get_tooltip_slot_changes),
						get_tooltip_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(tooltip_slot, local);
			current = true;
		},
		o(local) {
			transition_out(tooltip_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (tooltip_slot) tooltip_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let div_title_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);
	let if_block = /*visible*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			attr(div, "class", "tooltip-wrapper svelte-e2a5n0");
			attr(div, "title", div_title_value = /*mounted*/ ctx[9] ? undefined : /*text*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding_1*/ ctx[21](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "scroll", /*destroyTooltip*/ ctx[14]),
					listen(div, "mouseenter", /*mountTooltip*/ ctx[13]),
					listen(div, "mouseleave", /*destroyTooltip*/ ctx[14]),
					listen(div, "mousemove", /*updateMousePosition*/ ctx[11]),
					listen(div, "mousemove", /*mousemove_handler*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, null),
						null
					);
				}
			}

			if (/*visible*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*visible*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*mounted, text*/ 528 && div_title_value !== (div_title_value = /*mounted*/ ctx[9] ? undefined : /*text*/ ctx[4])) {
				attr(div, "title", div_title_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding_1*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"text","offset","placement","alignment","followCursor","persistent","visible","delay","tooltipElement","anchorElement","wrapperElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "" } = $$props;
	let { offset = 24 } = $$props;
	let { placement = "auto" } = $$props;
	let { alignment = "center" } = $$props;
	let { followCursor = false } = $$props;
	let { persistent = false } = $$props;
	let { visible = false } = $$props;
	let { delay = 1000 } = $$props;
	let { tooltipElement = null } = $$props;
	let { anchorElement = null } = $$props;
	let { wrapperElement = null } = $$props;
	let mounted = false;
	let tooltipDurationTimeout;
	let currentPosition = { x: 0, y: 0 };
	let mousePosition = { x: 0, y: 0 };
	onMount(() => $$invalidate(9, mounted = true));

	function updateMousePosition({ clientX, clientY }) {
		mousePosition.x = clientX;
		mousePosition.y = clientY;
	}

	function updateTooltipPositionAuto(wrapperPosition) {
		const { left, top } = wrapperPosition;
		$$invalidate(10, currentPosition.x = mousePosition.x - left, currentPosition);
		$$invalidate(10, currentPosition.y = mousePosition.y - top, currentPosition);
	}

	function mountTooltip() {
		tooltipDurationTimeout = setTimeout(
			() => {
				if (placement === "auto" && wrapperElement) updateTooltipPositionAuto(wrapperElement.getBoundingClientRect());
				$$invalidate(0, visible = true);
			},
			delay
		);
	}

	function destroyTooltip() {
		clearTimeout(tooltipDurationTimeout);
		if (!persistent) $$invalidate(0, visible = false);
	}

	function tooltipsurface_element_binding(value) {
		tooltipElement = value;
		$$invalidate(1, tooltipElement);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchorElement = $$value;
			$$invalidate(2, anchorElement);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrapperElement = $$value;
			$$invalidate(3, wrapperElement);
		});
	}

	const mousemove_handler = () => placement === "auto" && followCursor && updateTooltipPositionAuto(wrapperElement.getBoundingClientRect());

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ('offset' in $$new_props) $$invalidate(5, offset = $$new_props.offset);
		if ('placement' in $$new_props) $$invalidate(6, placement = $$new_props.placement);
		if ('alignment' in $$new_props) $$invalidate(7, alignment = $$new_props.alignment);
		if ('followCursor' in $$new_props) $$invalidate(8, followCursor = $$new_props.followCursor);
		if ('persistent' in $$new_props) $$invalidate(16, persistent = $$new_props.persistent);
		if ('visible' in $$new_props) $$invalidate(0, visible = $$new_props.visible);
		if ('delay' in $$new_props) $$invalidate(17, delay = $$new_props.delay);
		if ('tooltipElement' in $$new_props) $$invalidate(1, tooltipElement = $$new_props.tooltipElement);
		if ('anchorElement' in $$new_props) $$invalidate(2, anchorElement = $$new_props.anchorElement);
		if ('wrapperElement' in $$new_props) $$invalidate(3, wrapperElement = $$new_props.wrapperElement);
		if ('$$scope' in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
	};

	return [
		visible,
		tooltipElement,
		anchorElement,
		wrapperElement,
		text,
		offset,
		placement,
		alignment,
		followCursor,
		mounted,
		currentPosition,
		updateMousePosition,
		updateTooltipPositionAuto,
		mountTooltip,
		destroyTooltip,
		$$restProps,
		persistent,
		delay,
		slots,
		tooltipsurface_element_binding,
		div_binding,
		div_binding_1,
		mousemove_handler,
		$$scope
	];
}

class TooltipWrapper extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				text: 4,
				offset: 5,
				placement: 6,
				alignment: 7,
				followCursor: 8,
				persistent: 16,
				visible: 0,
				delay: 17,
				tooltipElement: 1,
				anchorElement: 2,
				wrapperElement: 3
			},
			add_css
		);
	}
}

export default TooltipWrapper;