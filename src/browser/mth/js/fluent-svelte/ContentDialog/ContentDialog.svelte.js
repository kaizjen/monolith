/* $svelte\fluent-svelte-raw\ContentDialog\ContentDialog.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append as append_1,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_bidirectional_transition,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element as element_1,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	self,
	set_attributes,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { createEventDispatcher } from "mth://.svelte/internal";
import { get_current_component } from "mth://.svelte/internal";
import { fade, scale } from "mth://.svelte/transition";
import { circOut } from "mth://.svelte/easing";
import { uid, focusTrap, getCSSDuration, createEventForwarder } from "../internal";
import TextBlock from "../TextBlock/TextBlock.svelte";

function add_css(target) {
	append_styles(target, "svelte-1szmc6y", ".content-dialog.svelte-1szmc6y{-webkit-animation:dialog-inner var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing);animation:dialog-inner var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing);background-clip:padding-box;background-color:var(--fds-solid-background-base);border:1px solid var(--fds-surface-stroke-default);border-radius:var(--fds-overlay-corner-radius);box-shadow:var(--fds-dialog-shadow);box-sizing:border-box;max-inline-size:calc(100% - 24px);overflow:hidden;position:fixed}.content-dialog.size-min.svelte-1szmc6y{inline-size:320px}.content-dialog.size-standard.svelte-1szmc6y{inline-size:448px}.content-dialog.size-max.svelte-1szmc6y{inline-size:540px}.content-dialog-smoke.svelte-1szmc6y{align-items:center;block-size:100%;display:flex;flex-direction:column;inline-size:100%;inset-block-start:0;inset-inline-start:0;justify-content:center;position:fixed;z-index:101}.content-dialog-smoke.darken.svelte-1szmc6y{background-color:var(--fds-smoke-background-default)}.content-dialog.svelte-1szmc6y .content-dialog-title{color:var(--fds-text-primary);display:block;margin-bottom:12px}.content-dialog-body.svelte-1szmc6y,.content-dialog-footer.svelte-1szmc6y{padding:24px}.content-dialog-body.svelte-1szmc6y{background-color:var(--fds-layer-background-default);color:var(--fds-text-primary);font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.content-dialog-footer.svelte-1szmc6y{grid-gap:8px;-webkit-border-before:1px solid var(--fds-card-stroke-default);border-block-start:1px solid var(--fds-card-stroke-default);display:grid;grid-auto-flow:column;grid-auto-rows:1fr;white-space:nowrap}.content-dialog-footer.svelte-1szmc6y>.button:only-child{inline-size:50%;justify-self:end}");
}

const get_outer_slot_changes = dirty => ({});
const get_outer_slot_context = ctx => ({});
const get_footer_slot_changes = dirty => ({});
const get_footer_slot_context = ctx => ({});

// (61:0) {#if open}
function create_if_block(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let t1;
	let div1_class_value;
	let div1_aria_labelledby_value;
	let forwardEvents_action;
	let div1_transition;
	let t2;
	let mountDialog_action;
	let _focusTrap_action;
	let div2_transition;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*title*/ ctx[5] && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[28], null);
	let if_block1 = /*$$slots*/ ctx[17].footer && create_if_block_1(ctx);

	let div1_levels = [
		{
			class: div1_class_value = "content-dialog size-" + /*size*/ ctx[6] + " " + /*className*/ ctx[8]
		},
		{ role: "dialog" },
		{ "aria-modal": "true" },
		{
			"aria-labelledby": div1_aria_labelledby_value = /*title*/ ctx[5] && /*titleId*/ ctx[12]
		},
		{ "aria-describedby": /*bodyId*/ ctx[13] },
		/*$$restProps*/ ctx[16]
	];

	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	const outer_slot_template = /*#slots*/ ctx[21].outer;
	const outer_slot = create_slot(outer_slot_template, ctx, /*$$scope*/ ctx[28], get_outer_slot_context);

	return {
		c() {
			div2 = element_1("div");
			div1 = element_1("div");
			div0 = element_1("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (outer_slot) outer_slot.c();
			attr(div0, "class", "content-dialog-body svelte-1szmc6y");
			attr(div0, "id", /*bodyId*/ ctx[13]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "svelte-1szmc6y", true);
			attr(div2, "class", "content-dialog-smoke svelte-1szmc6y");
			toggle_class(div2, "darken", /*darken*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append_1(div2, div1);
			append_1(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append_1(div0, t0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[22](div0);
			append_1(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			/*div1_binding*/ ctx[24](div1);
			append_1(div2, t2);

			if (outer_slot) {
				outer_slot.m(div2, null);
			}

			/*div2_binding*/ ctx[27](div2);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[10].call(null, div1)),
					listen(div2, "click", self(/*click_handler*/ ctx[25])),
					listen(div2, "mousedown", self(/*mousedown_handler*/ ctx[26])),
					action_destroyer(mountDialog_action = /*mountDialog*/ ctx[14].call(null, div2)),
					action_destroyer(_focusTrap_action = /*_focusTrap*/ ctx[9].call(null, div2))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*title*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*title*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[28], dirty, null),
						null
					);
				}
			}

			if (/*$$slots*/ ctx[17].footer) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 131072) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				(!current || dirty & /*size, className*/ 320 && div1_class_value !== (div1_class_value = "content-dialog size-" + /*size*/ ctx[6] + " " + /*className*/ ctx[8])) && { class: div1_class_value },
				{ role: "dialog" },
				{ "aria-modal": "true" },
				(!current || dirty & /*title*/ 32 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*title*/ ctx[5] && /*titleId*/ ctx[12])) && {
					"aria-labelledby": div1_aria_labelledby_value
				},
				{ "aria-describedby": /*bodyId*/ ctx[13] },
				dirty & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]
			]));

			toggle_class(div1, "svelte-1szmc6y", true);

			if (outer_slot) {
				if (outer_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						outer_slot,
						outer_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(outer_slot_template, /*$$scope*/ ctx[28], dirty, get_outer_slot_changes),
						get_outer_slot_context
					);
				}
			}

			if (dirty & /*darken*/ 128) {
				toggle_class(div2, "darken", /*darken*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			transition_in(if_block1);

			if (local) {
				add_render_callback(() => {
					if (!div1_transition) div1_transition = create_bidirectional_transition(
						div1,
						scale,
						{
							duration: getCSSDuration("--fds-control-fast-duration"),
							start: 1.05,
							easing: circOut
						},
						true
					);

					div1_transition.run(1);
				});
			}

			transition_in(outer_slot, local);

			if (local) {
				add_render_callback(() => {
					if (!div2_transition) div2_transition = create_bidirectional_transition(
						div2,
						fade,
						{
							duration: getCSSDuration("--fds-control-faster-duration")
						},
						true
					);

					div2_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			transition_out(if_block1);

			if (local) {
				if (!div1_transition) div1_transition = create_bidirectional_transition(
					div1,
					scale,
					{
						duration: getCSSDuration("--fds-control-fast-duration"),
						start: 1.05,
						easing: circOut
					},
					false
				);

				div1_transition.run(0);
			}

			transition_out(outer_slot, local);

			if (local) {
				if (!div2_transition) div2_transition = create_bidirectional_transition(
					div2,
					fade,
					{
						duration: getCSSDuration("--fds-control-faster-duration")
					},
					false
				);

				div2_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[22](null);
			if (if_block1) if_block1.d();
			/*div1_binding*/ ctx[24](null);
			if (detaching && div1_transition) div1_transition.end();
			if (outer_slot) outer_slot.d(detaching);
			/*div2_binding*/ ctx[27](null);
			if (detaching && div2_transition) div2_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (88:4) {#if title}
function create_if_block_2(ctx) {
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "subtitle",
				class: "content-dialog-title",
				id: /*titleId*/ ctx[12],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(textblock.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textblock, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope, title*/ 268435488) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textblock, detaching);
		}
	};
}

// (89:5) <TextBlock variant="subtitle" class="content-dialog-title" id={titleId}>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 32) set_data(t, /*title*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (95:3) {#if $$slots.footer}
function create_if_block_1(ctx) {
	let footer;
	let current;
	const footer_slot_template = /*#slots*/ ctx[21].footer;
	const footer_slot = create_slot(footer_slot_template, ctx, /*$$scope*/ ctx[28], get_footer_slot_context);

	return {
		c() {
			footer = element_1("footer");
			if (footer_slot) footer_slot.c();
			attr(footer, "class", "content-dialog-footer svelte-1szmc6y");
		},
		m(target, anchor) {
			insert(target, footer, anchor);

			if (footer_slot) {
				footer_slot.m(footer, null);
			}

			/*footer_binding*/ ctx[23](footer);
			current = true;
		},
		p(ctx, dirty) {
			if (footer_slot) {
				if (footer_slot.p && (!current || dirty & /*$$scope*/ 268435456)) {
					update_slot_base(
						footer_slot,
						footer_slot_template,
						ctx,
						/*$$scope*/ ctx[28],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[28])
						: get_slot_changes(footer_slot_template, /*$$scope*/ ctx[28], dirty, get_footer_slot_changes),
						get_footer_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(footer_slot, local);
			current = true;
		},
		o(local) {
			transition_out(footer_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(footer);
			if (footer_slot) footer_slot.d(detaching);
			/*footer_binding*/ ctx[23](null);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block = /*open*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(window, "keydown", /*handleEscapeKey*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let _focusTrap;

	const omit_props_names = [
		"open","title","size","closable","append","darken","trapFocus","class","element","backdropElement","bodyElement","footerElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { open = false } = $$props;
	let { title = "" } = $$props;
	let { size = "standard" } = $$props;
	let { closable = true } = $$props;
	let { append = undefined } = $$props;
	let { darken = true } = $$props;
	let { trapFocus = true } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { backdropElement = null } = $$props;
	let { bodyElement = null } = $$props;
	let { footerElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component(), ["open", "close", "backdropclick", "backdropmousedown"]);
	const dispatch = createEventDispatcher();
	const titleId = uid("fds-dialog-title-");
	const bodyId = uid("fds-dialog-body-");

	function mountDialog(node) {
		dispatch("open");
		if (append) append.appendChild(node);
		node.focus();
	}

	function close() {
		$$invalidate(0, open = false);
	}

	function handleEscapeKey({ key }) {
		if (key === "Escape" && open && closable) close();
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			bodyElement = $$value;
			$$invalidate(3, bodyElement);
		});
	}

	function footer_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			footerElement = $$value;
			$$invalidate(4, footerElement);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	const click_handler = e => dispatch("backdropclick", e);
	const mousedown_handler = e => dispatch("backdropmousedown", e);

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			backdropElement = $$value;
			$$invalidate(2, backdropElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('title' in $$new_props) $$invalidate(5, title = $$new_props.title);
		if ('size' in $$new_props) $$invalidate(6, size = $$new_props.size);
		if ('closable' in $$new_props) $$invalidate(18, closable = $$new_props.closable);
		if ('append' in $$new_props) $$invalidate(19, append = $$new_props.append);
		if ('darken' in $$new_props) $$invalidate(7, darken = $$new_props.darken);
		if ('trapFocus' in $$new_props) $$invalidate(20, trapFocus = $$new_props.trapFocus);
		if ('class' in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(1, element = $$new_props.element);
		if ('backdropElement' in $$new_props) $$invalidate(2, backdropElement = $$new_props.backdropElement);
		if ('bodyElement' in $$new_props) $$invalidate(3, bodyElement = $$new_props.bodyElement);
		if ('footerElement' in $$new_props) $$invalidate(4, footerElement = $$new_props.footerElement);
		if ('$$scope' in $$new_props) $$invalidate(28, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			$: if (!open) dispatch("close");
		}

		if ($$self.$$.dirty & /*trapFocus*/ 1048576) {
			$: $$invalidate(9, _focusTrap = trapFocus
			? focusTrap
			: () => {
					
				});
		}
	};

	return [
		open,
		element,
		backdropElement,
		bodyElement,
		footerElement,
		title,
		size,
		darken,
		className,
		_focusTrap,
		forwardEvents,
		dispatch,
		titleId,
		bodyId,
		mountDialog,
		handleEscapeKey,
		$$restProps,
		$$slots,
		closable,
		append,
		trapFocus,
		slots,
		div0_binding,
		footer_binding,
		div1_binding,
		click_handler,
		mousedown_handler,
		div2_binding,
		$$scope
	];
}

class ContentDialog extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				open: 0,
				title: 5,
				size: 6,
				closable: 18,
				append: 19,
				darken: 7,
				trapFocus: 20,
				class: 8,
				element: 1,
				backdropElement: 2,
				bodyElement: 3,
				footerElement: 4
			},
			add_css
		);
	}
}

export default ContentDialog;