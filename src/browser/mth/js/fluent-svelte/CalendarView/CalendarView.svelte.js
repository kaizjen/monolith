/* $svelte\fluent-svelte-raw\CalendarView\CalendarView.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	destroy_each,
	detach,
	element as element_1,
	empty,
	exclude_internal_props,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_attributes,
	set_data,
	space,
	svg_element,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "mth://.svelte/internal";

import { createEventDispatcher, onMount, tick } from "mth://.svelte/internal";
import { fly } from "mth://.svelte/transition";
import { circOut } from "mth://.svelte/easing";
import { get_current_component } from "mth://.svelte/internal";
import { createEventForwarder, getCSSDuration } from "../internal";
import CalendarViewItem from "./CalendarViewItem.svelte";

function add_css(target) {
	append_styles(target, "svelte-2np5h6", ".calendar-view.svelte-2np5h6.svelte-2np5h6{background-clip:padding-box;background-color:var(--fds-solid-background-quarternary);block-size:347px;border:1px solid var(--fds-surface-stroke-flyout);border-radius:var(--fds-control-corner-radius);color:var(--fds-text-primary);display:inline-flex;flex-direction:column;font-family:var(--fds-font-family-text);inline-size:300px;position:relative;text-align:start;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.calendar-view.floating.svelte-2np5h6.svelte-2np5h6{border-radius:var(--fds-overlay-corner-radius);box-shadow:var(--fds-flyout-shadow)}.calendar-view-header.svelte-2np5h6.svelte-2np5h6,.calendar-view-pagination-controls.svelte-2np5h6.svelte-2np5h6{align-items:center;display:flex}.calendar-view-pagination-controls.svelte-2np5h6 button.svelte-2np5h6{-webkit-margin-start:4px;inline-size:30px;margin-inline-start:4px;padding:0}.calendar-view-header.svelte-2np5h6.svelte-2np5h6{-webkit-border-after:1px solid var(--fds-card-stroke-default);border-block-end:1px solid var(--fds-card-stroke-default);box-sizing:border-box;inline-size:100%;padding:7px}.calendar-view-header.svelte-2np5h6 button.svelte-2np5h6{align-items:center;background-color:var(--fds-subtle-fill-transparent);border:none;border-radius:var(--fds-control-corner-radius);color:var(--fds-text-primary);display:flex;font-family:var(--fds-font-family-text);font-size:14px;font-weight:600;justify-content:center;line-height:20px;min-block-size:32px;outline:none;padding:0}.calendar-view-header.svelte-2np5h6 button.svelte-2np5h6:focus-visible{box-shadow:var(--fds-focus-stroke)}.calendar-view-header.svelte-2np5h6 button.svelte-2np5h6:hover{background-color:var(--fds-subtle-fill-secondary)}.calendar-view-header.svelte-2np5h6 button.svelte-2np5h6:active{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-secondary)}.calendar-view-header.svelte-2np5h6 button.svelte-2np5h6:disabled{background-color:var(--fds-sutble-fill-disabled);color:var(--fds-text-disabled)}.calendar-view-header.svelte-2np5h6 button:disabled svg.svelte-2np5h6{color:var(--fds-control-strong-fill-disabled)}.calendar-view-header.svelte-2np5h6 button svg.svelte-2np5h6{fill:currentColor;block-size:auto;color:var(--fds-control-strong-fill-default);inline-size:16px}.calendar-view-header-text.svelte-2np5h6.svelte-2np5h6{flex:1 1 auto}.calendar-view-header-text.svelte-2np5h6 button.svelte-2np5h6{flex:1 1 auto;inline-size:100%;justify-content:flex-start;padding-inline:9px}.calendar-view-table.svelte-2np5h6.svelte-2np5h6{block-size:calc(100% - 6px);box-sizing:border-box;display:block;font-size:14px;inline-size:calc(100% - 6px);inset:0;margin:3px;overflow:hidden;position:absolute}.calendar-view-table-wrapper.svelte-2np5h6.svelte-2np5h6{background-color:var(--fds-layer-on-acrylic-background-default);block-size:298px;contain:layout;inline-size:298px;overflow:hidden;position:relative}.calendar-view-table.view-months.svelte-2np5h6.svelte-2np5h6,.calendar-view-table.view-years.svelte-2np5h6.svelte-2np5h6{block-size:calc(100% - 22px);inline-size:calc(100% - 22px);margin:11px}.calendar-view-table.view-months.svelte-2np5h6 tr.svelte-2np5h6,.calendar-view-table.view-years.svelte-2np5h6 tr.svelte-2np5h6{grid-gap:17.3333333333px;-webkit-margin-after:17.3333333333px;grid-template-columns:repeat(4,1fr);margin-block-end:17.3333333333px}.calendar-view-table.svelte-2np5h6 td.svelte-2np5h6,.calendar-view-table.svelte-2np5h6 th.svelte-2np5h6{padding:0}.calendar-view-table.svelte-2np5h6 th.svelte-2np5h6{align-items:center;block-size:40px;display:flex;font-size:13px;font-weight:600;justify-content:center;text-align:center}.calendar-view-table.svelte-2np5h6 tbody.svelte-2np5h6,.calendar-view-table.svelte-2np5h6 thead.svelte-2np5h6{display:flex;flex-direction:column;inline-size:100%}.calendar-view-table.svelte-2np5h6 tbody.svelte-2np5h6,.calendar-view-table.svelte-2np5h6 thead tr.svelte-2np5h6{background-color:var(--fds-solid-background-quarternary);box-shadow:inset 0 0 0 100vmax var(--fds-layer-on-acrylic-background-default)}.calendar-view-table.svelte-2np5h6 thead.svelte-2np5h6{position:relative;z-index:1}.calendar-view-table.svelte-2np5h6 tbody.svelte-2np5h6{inset-block-end:0;inset-inline-start:0;position:absolute}.calendar-view-table.svelte-2np5h6 tbody tr.svelte-2np5h6:last-child{-webkit-margin-after:0;margin-block-end:0}.calendar-view-table.svelte-2np5h6 tr.svelte-2np5h6{grid-gap:2px;-webkit-margin-after:2px;display:grid;grid-template-columns:repeat(7,1fr);inline-size:100%;margin-block-end:2px}");
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[41] = list[i];
	child_ctx[51] = i;
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[56] = list[i];
	child_ctx[49] = i;

	const constants_0 = /*value*/ child_ctx[0] !== null && (Array.isArray(/*value*/ child_ctx[0])
	? indexOfDate(/*value*/ child_ctx[0], /*year*/ child_ctx[56], "year") > -1
	: compareDates(/*value*/ child_ctx[0], /*year*/ child_ctx[56], "year"));

	child_ctx[45] = constants_0;
	const constants_1 = compareDates(/*year*/ child_ctx[56], /*page*/ child_ctx[11], "decade");
	child_ctx[57] = constants_1;
	const constants_2 = getCalendarYears(/*page*/ child_ctx[11]).find(d => compareDates(d, /*page*/ child_ctx[11], "decade") && (!/*min*/ child_ctx[6] || /*min*/ child_ctx[6].getFullYear() <= d.getFullYear()) && (!/*max*/ child_ctx[7] || /*max*/ child_ctx[7] >= d));
	child_ctx[58] = constants_2;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[52] = list[i];
	child_ctx[49] = i;

	const constants_0 = /*value*/ child_ctx[0] !== null && (Array.isArray(/*value*/ child_ctx[0])
	? indexOfDate(/*value*/ child_ctx[0], /*month*/ child_ctx[52], "month") > -1
	: compareDates(/*value*/ child_ctx[0], /*month*/ child_ctx[52], "month"));

	child_ctx[45] = constants_0;
	const constants_1 = /*month*/ child_ctx[52].getFullYear() === /*page*/ child_ctx[11].getFullYear();
	child_ctx[53] = constants_1;
	const constants_2 = getCalendarMonths(/*page*/ child_ctx[11]).find(d => compareDates(d, /*page*/ child_ctx[11], "year") && (!/*min*/ child_ctx[6] || new Date(/*min*/ child_ctx[6].getFullYear(), /*min*/ child_ctx[6].getMonth(), 1) <= new Date(d.getFullYear(), d.getMonth(), 1)) && (!/*max*/ child_ctx[7] || /*max*/ child_ctx[7] >= d));
	child_ctx[54] = constants_2;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[41] = list[i];
	child_ctx[43] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[44] = list[i];
	child_ctx[49] = i;

	const constants_0 = /*value*/ child_ctx[0] !== null && (Array.isArray(/*value*/ child_ctx[0])
	? indexOfDate(/*value*/ child_ctx[0], /*day*/ child_ctx[44], "day") > -1
	: compareDates(/*value*/ child_ctx[0], /*day*/ child_ctx[44], "day"));

	child_ctx[45] = constants_0;
	const constants_1 = compareDates(/*day*/ child_ctx[44], /*page*/ child_ctx[11], "month");
	child_ctx[46] = constants_1;
	const constants_2 = /*getCalendarDays*/ child_ctx[19](/*page*/ child_ctx[11]).find(d => compareDates(d, /*page*/ child_ctx[11], "month") && (!/*blackout*/ child_ctx[5] || indexOfDate(/*blackout*/ child_ctx[5], d, "day") === -1) && (!/*min*/ child_ctx[6] || /*min*/ child_ctx[6] <= d) && (!/*max*/ child_ctx[7] || /*max*/ child_ctx[7] >= d));
	child_ctx[47] = constants_2;
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[41] = list[i];
	child_ctx[44] = i;
	return child_ctx;
}

// (423:4) {#if view === "days"}
function create_if_block_3(ctx) {
	let thead;
	let tr;
	let each_value_5 = Array(7);
	let each_blocks = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	return {
		c() {
			thead = element_1("thead");
			tr = element_1("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(tr, "class", "svelte-2np5h6");
			attr(thead, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, thead, anchor);
			append(thead, tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*locale, weekStart*/ 264) {
				each_value_5 = Array(7);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_5.length;
			}
		},
		d(detaching) {
			if (detaching) detach(thead);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (426:7) {#each Array(7) as _, day}
function create_each_block_5(ctx) {
	let th;

	let t0_value = getWeekdayLocale(/*day*/ ctx[44], {
		locale: /*locale*/ ctx[3],
		format: "short",
		offset: /*weekStart*/ ctx[8]
	}) + "";

	let t0;
	let t1;

	let th_levels = [
		{ scope: "col" },
		{
			abbr: getWeekdayLocale(/*day*/ ctx[44], {
				locale: /*locale*/ ctx[3],
				offset: /*weekStart*/ ctx[8]
			})
		}
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element_1("th");
			t0 = text(t0_value);
			t1 = space();
			set_attributes(th, th_data);
			toggle_class(th, "svelte-2np5h6", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t0);
			append(th, t1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*locale, weekStart*/ 264 && t0_value !== (t0_value = getWeekdayLocale(/*day*/ ctx[44], {
				locale: /*locale*/ ctx[3],
				format: "short",
				offset: /*weekStart*/ ctx[8]
			}) + "")) set_data(t0, t0_value);

			set_attributes(th, th_data = get_spread_update(th_levels, [
				{ scope: "col" },
				dirty[0] & /*locale, weekStart*/ 264 && {
					abbr: getWeekdayLocale(/*day*/ ctx[44], {
						locale: /*locale*/ ctx[3],
						offset: /*weekStart*/ ctx[8]
					})
				}
			]));

			toggle_class(th, "svelte-2np5h6", true);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (516:6) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_2 = Array(4);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page, min, max, headers, value, selectMonth, handleKeyDown, locale, view, selectYear*/ 54528219) {
				each_value_2 = Array(4);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (469:6) {#if view === "days"}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = Array(6);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*getCalendarDays, page, min, max, blackout, headers, locale, value, selectDay, handleKeyDown*/ 13109497) {
				each_value = Array(6);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (583:36) 
function create_if_block_2(ctx) {
	let each_1_anchor;
	let current;
	let each_value_4 = getCalendarYears(/*page*/ ctx[11]).slice(/*row*/ ctx[51] * 4, /*row*/ ctx[51] * 4 + 4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page, min, max, value, selectYear, handleKeyDown*/ 37750977) {
				each_value_4 = getCalendarYears(/*page*/ ctx[11]).slice(/*row*/ ctx[51] * 4, /*row*/ ctx[51] * 4 + 4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_4.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_4.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (519:9) {#if view === "months"}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value_3 = getCalendarMonths(/*page*/ ctx[11]).slice(/*row*/ ctx[51] * 4, /*row*/ ctx[51] * 4 + 4);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page, min, max, headers, value, selectMonth, handleKeyDown, locale*/ 20973785) {
				each_value_3 = getCalendarMonths(/*page*/ ctx[11]).slice(/*row*/ ctx[51] * 4, /*row*/ ctx[51] * 4 + 4);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (602:12) <CalendarViewItem              on:click={() => selectYear(year)}              on:keydown={e => handleKeyDown(e, year)}              variant="monthYear"              outOfRange={!inDecade}              current={compareDates(year, new Date(), "year")}              disabled={min?.getFullYear() >               year.getFullYear() || max < year}              {selected}              tabindex={firstFocusableYear &&              compareDates(firstFocusableYear, year, "year")               ? 0               : -1}             >
function create_default_slot_2(ctx) {
	let t_value = /*year*/ ctx[56].getFullYear() + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page*/ 2048 && t_value !== (t_value = /*year*/ ctx[56].getFullYear() + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (584:10) {#each getCalendarYears(page).slice(row * 4, row * 4 + 4) as year, i}
function create_each_block_4(ctx) {
	let td;
	let calendarviewitem;
	let t;
	let current;

	function click_handler_5() {
		return /*click_handler_5*/ ctx[35](/*year*/ ctx[56]);
	}

	function keydown_handler_2(...args) {
		return /*keydown_handler_2*/ ctx[36](/*year*/ ctx[56], ...args);
	}

	calendarviewitem = new CalendarViewItem({
			props: {
				variant: "monthYear",
				outOfRange: !/*inDecade*/ ctx[57],
				current: compareDates(/*year*/ ctx[56], new Date(), "year"),
				disabled: /*min*/ ctx[6]?.getFullYear() > /*year*/ ctx[56].getFullYear() || /*max*/ ctx[7] < /*year*/ ctx[56],
				selected: /*selected*/ ctx[45],
				tabindex: /*firstFocusableYear*/ ctx[58] && compareDates(/*firstFocusableYear*/ ctx[58], /*year*/ ctx[56], "year")
				? 0
				: -1,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	calendarviewitem.$on("click", click_handler_5);
	calendarviewitem.$on("keydown", keydown_handler_2);

	return {
		c() {
			td = element_1("td");
			create_component(calendarviewitem.$$.fragment);
			t = space();
			attr(td, "role", "gridcell");
			attr(td, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			mount_component(calendarviewitem, td, null);
			append(td, t);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const calendarviewitem_changes = {};
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.outOfRange = !/*inDecade*/ ctx[57];
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.current = compareDates(/*year*/ ctx[56], new Date(), "year");
			if (dirty[0] & /*min, page, max*/ 2240) calendarviewitem_changes.disabled = /*min*/ ctx[6]?.getFullYear() > /*year*/ ctx[56].getFullYear() || /*max*/ ctx[7] < /*year*/ ctx[56];
			if (dirty[0] & /*value, page*/ 2049) calendarviewitem_changes.selected = /*selected*/ ctx[45];

			if (dirty[0] & /*page, min, max*/ 2240) calendarviewitem_changes.tabindex = /*firstFocusableYear*/ ctx[58] && compareDates(/*firstFocusableYear*/ ctx[58], /*year*/ ctx[56], "year")
			? 0
			: -1;

			if (dirty[0] & /*page*/ 2048 | dirty[1] & /*$$scope*/ 1073741824) {
				calendarviewitem_changes.$$scope = { dirty, ctx };
			}

			calendarviewitem.$set(calendarviewitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(calendarviewitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(calendarviewitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			destroy_component(calendarviewitem);
		}
	};
}

// (548:12) <CalendarViewItem              on:click={() => selectMonth(month)}              on:keydown={e => handleKeyDown(e, month)}              variant="monthYear"              outOfRange={!inYear}              current={compareDates(               month,               new Date(),               "month"              )}              disabled={(min?.getMonth() > month.getMonth() &&               min?.getFullYear() ===                month.getFullYear()) ||               max < month}              header={page &&               headers &&               month.getMonth() === 0 &&               month.getFullYear().toString()}              {selected}              tabindex={firstFocusableMonth &&              compareDates(               firstFocusableMonth,               month,               "month"              )               ? 0               : -1}             >
function create_default_slot_1(ctx) {
	let t_value = getMonthLocale(/*month*/ ctx[52].getMonth(), {
		locale: /*locale*/ ctx[3],
		format: "short"
	}) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page, locale*/ 2056 && t_value !== (t_value = getMonthLocale(/*month*/ ctx[52].getMonth(), {
				locale: /*locale*/ ctx[3],
				format: "short"
			}) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (520:10) {#each getCalendarMonths(page).slice(row * 4, row * 4 + 4) as month, i}
function create_each_block_3(ctx) {
	let td;
	let calendarviewitem;
	let t;
	let current;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[33](/*month*/ ctx[52]);
	}

	function keydown_handler_1(...args) {
		return /*keydown_handler_1*/ ctx[34](/*month*/ ctx[52], ...args);
	}

	calendarviewitem = new CalendarViewItem({
			props: {
				variant: "monthYear",
				outOfRange: !/*inYear*/ ctx[53],
				current: compareDates(/*month*/ ctx[52], new Date(), "month"),
				disabled: /*min*/ ctx[6]?.getMonth() > /*month*/ ctx[52].getMonth() && /*min*/ ctx[6]?.getFullYear() === /*month*/ ctx[52].getFullYear() || /*max*/ ctx[7] < /*month*/ ctx[52],
				header: /*page*/ ctx[11] && /*headers*/ ctx[4] && /*month*/ ctx[52].getMonth() === 0 && /*month*/ ctx[52].getFullYear().toString(),
				selected: /*selected*/ ctx[45],
				tabindex: /*firstFocusableMonth*/ ctx[54] && compareDates(/*firstFocusableMonth*/ ctx[54], /*month*/ ctx[52], "month")
				? 0
				: -1,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	calendarviewitem.$on("click", click_handler_4);
	calendarviewitem.$on("keydown", keydown_handler_1);

	return {
		c() {
			td = element_1("td");
			create_component(calendarviewitem.$$.fragment);
			t = space();
			attr(td, "role", "gridcell");
			attr(td, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			mount_component(calendarviewitem, td, null);
			append(td, t);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const calendarviewitem_changes = {};
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.outOfRange = !/*inYear*/ ctx[53];
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.current = compareDates(/*month*/ ctx[52], new Date(), "month");
			if (dirty[0] & /*min, page, max*/ 2240) calendarviewitem_changes.disabled = /*min*/ ctx[6]?.getMonth() > /*month*/ ctx[52].getMonth() && /*min*/ ctx[6]?.getFullYear() === /*month*/ ctx[52].getFullYear() || /*max*/ ctx[7] < /*month*/ ctx[52];
			if (dirty[0] & /*page, headers*/ 2064) calendarviewitem_changes.header = /*page*/ ctx[11] && /*headers*/ ctx[4] && /*month*/ ctx[52].getMonth() === 0 && /*month*/ ctx[52].getFullYear().toString();
			if (dirty[0] & /*value, page*/ 2049) calendarviewitem_changes.selected = /*selected*/ ctx[45];

			if (dirty[0] & /*page, min, max*/ 2240) calendarviewitem_changes.tabindex = /*firstFocusableMonth*/ ctx[54] && compareDates(/*firstFocusableMonth*/ ctx[54], /*month*/ ctx[52], "month")
			? 0
			: -1;

			if (dirty[0] & /*page, locale*/ 2056 | dirty[1] & /*$$scope*/ 1073741824) {
				calendarviewitem_changes.$$scope = { dirty, ctx };
			}

			calendarviewitem.$set(calendarviewitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(calendarviewitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(calendarviewitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			destroy_component(calendarviewitem);
		}
	};
}

// (517:7) {#each Array(4) as _, row}
function create_each_block_2(ctx) {
	let tr;
	let current_block_type_index;
	let if_block;
	let t;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*view*/ ctx[1] === "months") return 0;
		if (/*view*/ ctx[1] === "years") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx, [-1, -1]))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			tr = element_1("tr");
			if (if_block) if_block.c();
			t = space();
			attr(tr, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(tr, null);
			}

			append(tr, t);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(tr, t);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};
}

// (489:11) <CalendarViewItem             on:click={() => selectDay(day)}             on:keydown={e => handleKeyDown(e, day)}             outOfRange={!inMonth}             current={compareDates(day, new Date(), "day")}             disabled={min > day || max < day}             blackout={blackout &&              indexOfDate(blackout, day, "day") > -1}             header={page &&              headers &&              day.getDate() === 1 &&              getMonthLocale(day.getMonth(), {               locale,               format: "short"              })}             tabindex={firstFocusableDay &&             compareDates(firstFocusableDay, day, "day")              ? 0              : -1}             {selected}            >
function create_default_slot(ctx) {
	let t_value = /*day*/ ctx[44].getDate() + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*page*/ 2048 && t_value !== (t_value = /*day*/ ctx[44].getDate() + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (472:9) {#each getCalendarDays(page).slice(week * 7, week * 7 + 7) as day, i}
function create_each_block_1(ctx) {
	let td;
	let calendarviewitem;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[31](/*day*/ ctx[44]);
	}

	function keydown_handler(...args) {
		return /*keydown_handler*/ ctx[32](/*day*/ ctx[44], ...args);
	}

	calendarviewitem = new CalendarViewItem({
			props: {
				outOfRange: !/*inMonth*/ ctx[46],
				current: compareDates(/*day*/ ctx[44], new Date(), "day"),
				disabled: /*min*/ ctx[6] > /*day*/ ctx[44] || /*max*/ ctx[7] < /*day*/ ctx[44],
				blackout: /*blackout*/ ctx[5] && indexOfDate(/*blackout*/ ctx[5], /*day*/ ctx[44], "day") > -1,
				header: /*page*/ ctx[11] && /*headers*/ ctx[4] && /*day*/ ctx[44].getDate() === 1 && getMonthLocale(/*day*/ ctx[44].getMonth(), {
					locale: /*locale*/ ctx[3],
					format: "short"
				}),
				tabindex: /*firstFocusableDay*/ ctx[47] && compareDates(/*firstFocusableDay*/ ctx[47], /*day*/ ctx[44], "day")
				? 0
				: -1,
				selected: /*selected*/ ctx[45],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	calendarviewitem.$on("click", click_handler_3);
	calendarviewitem.$on("keydown", keydown_handler);

	return {
		c() {
			td = element_1("td");
			create_component(calendarviewitem.$$.fragment);
			attr(td, "role", "gridcell");
			attr(td, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			mount_component(calendarviewitem, td, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const calendarviewitem_changes = {};
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.outOfRange = !/*inMonth*/ ctx[46];
			if (dirty[0] & /*page*/ 2048) calendarviewitem_changes.current = compareDates(/*day*/ ctx[44], new Date(), "day");
			if (dirty[0] & /*min, page, max*/ 2240) calendarviewitem_changes.disabled = /*min*/ ctx[6] > /*day*/ ctx[44] || /*max*/ ctx[7] < /*day*/ ctx[44];
			if (dirty[0] & /*blackout, page*/ 2080) calendarviewitem_changes.blackout = /*blackout*/ ctx[5] && indexOfDate(/*blackout*/ ctx[5], /*day*/ ctx[44], "day") > -1;

			if (dirty[0] & /*page, headers, locale*/ 2072) calendarviewitem_changes.header = /*page*/ ctx[11] && /*headers*/ ctx[4] && /*day*/ ctx[44].getDate() === 1 && getMonthLocale(/*day*/ ctx[44].getMonth(), {
				locale: /*locale*/ ctx[3],
				format: "short"
			});

			if (dirty[0] & /*page, blackout, min, max*/ 2272) calendarviewitem_changes.tabindex = /*firstFocusableDay*/ ctx[47] && compareDates(/*firstFocusableDay*/ ctx[47], /*day*/ ctx[44], "day")
			? 0
			: -1;

			if (dirty[0] & /*value, page*/ 2049) calendarviewitem_changes.selected = /*selected*/ ctx[45];

			if (dirty[0] & /*page*/ 2048 | dirty[1] & /*$$scope*/ 1073741824) {
				calendarviewitem_changes.$$scope = { dirty, ctx };
			}

			calendarviewitem.$set(calendarviewitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(calendarviewitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(calendarviewitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			destroy_component(calendarviewitem);
		}
	};
}

// (470:7) {#each Array(6) as _, week}
function create_each_block(ctx) {
	let tr;
	let t;
	let current;
	let each_value_1 = /*getCalendarDays*/ ctx[19](/*page*/ ctx[11]).slice(/*week*/ ctx[43] * 7, /*week*/ ctx[43] * 7 + 7);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			tr = element_1("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(tr, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*getCalendarDays, page, min, max, blackout, headers, locale, value, selectDay, handleKeyDown*/ 13109497) {
				each_value_1 = /*getCalendarDays*/ ctx[19](/*page*/ ctx[11]).slice(/*week*/ ctx[43] * 7, /*week*/ ctx[43] * 7 + 7);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tr, t);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (443:4) {#key page}
function create_key_block_1(ctx) {
	let tbody;
	let current_block_type_index;
	let if_block;
	let bodyElementBinding_action;
	let tbody_intro;
	let tbody_outro;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*view*/ ctx[1] === "days") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			tbody = element_1("tbody");
			if_block.c();
			attr(tbody, "class", "svelte-2np5h6");
		},
		m(target, anchor) {
			insert(target, tbody, anchor);
			if_blocks[current_block_type_index].m(tbody, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(bodyElementBinding_action = /*bodyElementBinding*/ ctx[18].call(null, tbody));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(tbody, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			add_render_callback(() => {
				if (tbody_outro) tbody_outro.end(1);

				tbody_intro = create_in_transition(tbody, fly, {
					opacity: 1,
					duration: /*pageAnimationDuration*/ ctx[15],
					easing: circOut,
					y: /*pageAnimationDirection*/ ctx[14] === "neutral"
					? 0
					: /*pageAnimationDirection*/ ctx[14] === "up" ? -198 : 198
				});

				tbody_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(if_block);
			if (tbody_intro) tbody_intro.invalidate();

			if (local) {
				tbody_outro = create_out_transition(tbody, fly, {
					opacity: 1,
					duration: /*pageAnimationDuration*/ ctx[15],
					easing: circOut,
					y: /*pageAnimationDirection*/ ctx[14] === "neutral"
					? 0
					: /*pageAnimationDirection*/ ctx[14] === "up" ? 198 : -198
				});
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(tbody);
			if_blocks[current_block_type_index].d();
			if (detaching && tbody_outro) tbody_outro.end();
			mounted = false;
			dispose();
		}
	};
}

// (406:2) {#key view}
function create_key_block(ctx) {
	let table;
	let t;
	let previous_key = /*page*/ ctx[11];
	let table_class_value;
	let table_intro;
	let table_outro;
	let current;
	let if_block = /*view*/ ctx[1] === "days" && create_if_block_3(ctx);
	let key_block = create_key_block_1(ctx);

	return {
		c() {
			table = element_1("table");
			if (if_block) if_block.c();
			t = space();
			key_block.c();
			attr(table, "class", table_class_value = "calendar-view-table view-" + /*view*/ ctx[1] + " svelte-2np5h6");
			attr(table, "role", "grid");
		},
		m(target, anchor) {
			insert(target, table, anchor);
			if (if_block) if_block.m(table, null);
			append(table, t);
			key_block.m(table, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*view*/ ctx[1] === "days") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(table, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*page*/ 2048 && safe_not_equal(previous_key, previous_key = /*page*/ ctx[11])) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block_1(ctx);
				key_block.c();
				transition_in(key_block);
				key_block.m(table, null);
			} else {
				key_block.p(ctx, dirty);
			}

			if (!current || dirty[0] & /*view*/ 2 && table_class_value !== (table_class_value = "calendar-view-table view-" + /*view*/ ctx[1] + " svelte-2np5h6")) {
				attr(table, "class", table_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(key_block);

			add_render_callback(() => {
				if (table_outro) table_outro.end(1);

				table_intro = create_in_transition(table, fadeScale, {
					duration: /*viewAnimationDirection*/ ctx[13] !== "neutral"
					? 500
					: 0,
					easing: circOut,
					baseScale: /*viewAnimationDirection*/ ctx[13] === "up"
					? 1.29
					: 0.84,
					delay: /*viewAnimationDirection*/ ctx[13] !== "neutral"
					? 150
					: 0
				});

				table_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(key_block);
			if (table_intro) table_intro.invalidate();

			if (local) {
				table_outro = create_out_transition(table, fadeScale, {
					duration: /*viewAnimationDirection*/ ctx[13] !== "neutral"
					? 150
					: 0,
					easing: circOut,
					baseScale: /*viewAnimationDirection*/ ctx[13] === "up"
					? 0.84
					: 1.29,
					delay: 0
				});
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(table);
			if (if_block) if_block.d();
			key_block.d(detaching);
			if (detaching && table_outro) table_outro.end();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let header_1;
	let div0;
	let button0;
	let t0;
	let button0_disabled_value;
	let t1;
	let div1;
	let button1;
	let svg0;
	let path0;
	let button1_disabled_value;
	let t2;
	let button2;
	let svg1;
	let path1;
	let button2_disabled_value;
	let t3;
	let div2;
	let previous_key = /*view*/ ctx[1];
	let div3_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	let key_block = create_key_block(ctx);

	let div3_levels = [
		{
			class: div3_class_value = "calendar-view " + /*className*/ ctx[10]
		},
		/*$$restProps*/ ctx[26]
	];

	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element_1("div");
			header_1 = element_1("header");
			div0 = element_1("div");
			button0 = element_1("button");
			t0 = text(/*header*/ ctx[12]);
			t1 = space();
			div1 = element_1("div");
			button1 = element_1("button");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t2 = space();
			button2 = element_1("button");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t3 = space();
			div2 = element_1("div");
			key_block.c();
			button0.disabled = button0_disabled_value = /*view*/ ctx[1] === "years";
			attr(button0, "class", "svelte-2np5h6");
			attr(div0, "class", "calendar-view-header-text svelte-2np5h6");
			attr(div0, "role", "heading");
			attr(div0, "aria-live", "polite");
			attr(path0, "d", "M4.95681 10.998C4.14912 10.998 3.67466 10.09 4.13591 9.42698L6.76854 5.64257C7.36532 4.78469 8.63448 4.7847 9.23126 5.64257L11.8639 9.42698C12.3251 10.09 11.8507 10.998 11.043 10.998H4.95681Z");
			attr(svg0, "width", "16");
			attr(svg0, "height", "16");
			attr(svg0, "viewBox", "0 0 16 16");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "class", "svelte-2np5h6");
			button1.disabled = button1_disabled_value = /*view*/ ctx[1] && /*min*/ ctx[6] >= /*page*/ ctx[11];
			attr(button1, "class", "svelte-2np5h6");
			attr(path1, "d", "M4.95681 5C4.14912 5 3.67466 5.90803 4.13591 6.57107L6.76854 10.3555C7.36532 11.2134 8.63448 11.2133 9.23126 10.3555L11.8639 6.57106C12.3251 5.90803 11.8507 5 11.043 5H4.95681Z");
			attr(svg1, "width", "16");
			attr(svg1, "height", "16");
			attr(svg1, "viewBox", "0 0 16 16");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "class", "svelte-2np5h6");
			button2.disabled = button2_disabled_value = /*max*/ ctx[7] < /*nextPage*/ ctx[16];
			attr(button2, "class", "svelte-2np5h6");
			attr(div1, "class", "calendar-view-pagination-controls svelte-2np5h6");
			attr(header_1, "class", "calendar-view-header svelte-2np5h6");
			attr(div2, "class", "calendar-view-table-wrapper svelte-2np5h6");
			set_attributes(div3, div3_data);
			toggle_class(div3, "floating", /*__floating*/ ctx[9]);
			toggle_class(div3, "svelte-2np5h6", true);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, header_1);
			append(header_1, div0);
			append(div0, button0);
			append(button0, t0);
			append(header_1, t1);
			append(header_1, div1);
			append(div1, button1);
			append(button1, svg0);
			append(svg0, path0);
			append(div1, t2);
			append(div1, button2);
			append(button2, svg1);
			append(svg1, path1);
			append(div3, t3);
			append(div3, div2);
			key_block.m(div2, null);
			/*div3_binding*/ ctx[37](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[28]),
					listen(button1, "click", /*click_handler_1*/ ctx[29]),
					listen(button2, "click", /*click_handler_2*/ ctx[30]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[17].call(null, div3))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*header*/ 4096) set_data(t0, /*header*/ ctx[12]);

			if (!current || dirty[0] & /*view*/ 2 && button0_disabled_value !== (button0_disabled_value = /*view*/ ctx[1] === "years")) {
				button0.disabled = button0_disabled_value;
			}

			if (!current || dirty[0] & /*view, min, page*/ 2114 && button1_disabled_value !== (button1_disabled_value = /*view*/ ctx[1] && /*min*/ ctx[6] >= /*page*/ ctx[11])) {
				button1.disabled = button1_disabled_value;
			}

			if (!current || dirty[0] & /*max, nextPage*/ 65664 && button2_disabled_value !== (button2_disabled_value = /*max*/ ctx[7] < /*nextPage*/ ctx[16])) {
				button2.disabled = button2_disabled_value;
			}

			if (dirty[0] & /*view*/ 2 && safe_not_equal(previous_key, previous_key = /*view*/ ctx[1])) {
				group_outros();
				transition_out(key_block, 1, 1, noop);
				check_outros();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in(key_block);
				key_block.m(div2, null);
			} else {
				key_block.p(ctx, dirty);
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				(!current || dirty[0] & /*className*/ 1024 && div3_class_value !== (div3_class_value = "calendar-view " + /*className*/ ctx[10])) && { class: div3_class_value },
				dirty[0] & /*$$restProps*/ 67108864 && /*$$restProps*/ ctx[26]
			]));

			toggle_class(div3, "floating", /*__floating*/ ctx[9]);
			toggle_class(div3, "svelte-2np5h6", true);
		},
		i(local) {
			if (current) return;
			transition_in(key_block);
			current = true;
		},
		o(local) {
			transition_out(key_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			key_block.d(detaching);
			/*div3_binding*/ ctx[37](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function getWeekdayLocale(day, { locale = undefined, format = "long", offset = 0 } = {}) {
	return new Intl.DateTimeFormat(locale, { weekday: format, timeZone: "UTC" }).format(new Date(Date.UTC(2000, 1, day + offset - 1)));
}

function getMonthLocale(month, { locale = undefined, format = "long" } = {}) {
	return new Intl.DateTimeFormat(locale, { month: format }).format(new Date(2000, month));
}

function getMonthLength(year, month) {
	return new Date(year, month + 1, 0).getDate() - 1;
}

function getMonthDays(year, month) {
	const days = [];

	for (let i = 0; i < getMonthLength(year, month) + 1; i++) {
		days.push(new Date(year, month, i + 1));
	}

	return days;
}

function getYearMonths(year) {
	const days = [];

	for (let i = 0; i < 12; i++) {
		days.push(new Date(year, i, 1));
	}

	return days;
}

function compareDates(a, b, precision = "time") {
	switch (precision) {
		case "time":
			return a.getTime() === b.getTime();
		case "day":
			return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
		case "month":
			return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth();
		case "year":
			return a.getFullYear() === b.getFullYear();
		case "decade":
			return Math.floor(a.getFullYear() / 10) * 10 === Math.floor(b.getFullYear() / 10) * 10;
	}
}

function indexOfDate(array, date, precision = "time") {
	return array.findIndex(d => compareDates(d, date, precision));
}

function getCalendarMonths(date) {
	const year = date.getFullYear();
	let months = [];
	return months.concat(getYearMonths(year), getYearMonths(year + 1).slice(0, 4));
}

function getCalendarYears(date) {
	const decadeStart = Math.floor(date.getFullYear() / 10) * 10;
	let years = [];

	for (let i = 0; i < 12; i++) {
		years.push(new Date(decadeStart + i, 0, 1));
	}

	if (decadeStart % 20 === 0) {
		for (let i = 0; i < 2; i++) {
			years.unshift(new Date(decadeStart - (i + 1), 0, 1));
		}

		for (let i = 0; i < 4; i++) {
			years.push(new Date(decadeStart + i + 12, 0, 1));
		}
	} else {
		for (let i = 0; i < 6; i++) {
			years.push(new Date(decadeStart + i + 12, 0, 1));
		}
	}

	return years;
}

function getPageByOffset(offset, page, view) {
	if (view === "days") {
		return new Date(page.getFullYear(), page.getMonth() + offset, 1);
	} else if (view === "months") {
		return new Date(page.getFullYear() + offset, 0, 1);
	} else if (view === "years") {
		return new Date(Math.floor(page.getFullYear() / 10) * 10 + offset * 10, 0, 1);
	}
}

function fadeScale(node, { delay = 0, duration = 0, easing = x => x, baseScale = 0 }) {
	const o = +getComputedStyle(node).opacity;
	const is = 1 - baseScale;

	return {
		delay,
		duration,
		css: t => {
			const eased = easing(t);
			return `opacity: ${eased * o}; transform: scale(${eased * is + baseScale})`;
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let nextPage;

	const omit_props_names = [
		"locale","multiple","headers","value","blackout","min","max","view","weekStart","__floating","class","element"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { locale = undefined } = $$props;
	let { multiple = false } = $$props;
	let { headers = false } = $$props;
	let { value = null } = $$props;
	let { blackout = undefined } = $$props;
	let { min = undefined } = $$props;
	let { max = undefined } = $$props;
	let { view = "days" } = $$props;
	let { weekStart = 0 } = $$props;
	let { __floating = false } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	const dispatch = createEventDispatcher();
	const forwardEvents = createEventForwarder(get_current_component(), ["change"]);
	const bodyElementBinding = node => bodyElement = node; // bind:this breaks with our page transition for some reason
	let header = "";
	let viewAnimationDirection = "neutral";
	let pageAnimationDirection = "neutral";
	let pageAnimationDuration = 0;
	let bodyElement = null;
	let firstValue = Array.isArray(value) ? value[0] : value;

	let page = (!min || firstValue >= min) && (!max || firstValue < max)
	? new Date((firstValue !== null && firstValue !== void 0
			? firstValue
			: new Date()).getFullYear(),
		(firstValue !== null && firstValue !== void 0
			? firstValue
			: new Date()).getMonth(),
		1)
	: firstValue < min
		? new Date(min.getFullYear(), min.getMonth(), 1)
		: new Date(max.getFullYear(), max.getMonth(), 1);

	onMount(() => {
		$$invalidate(15, pageAnimationDuration = getCSSDuration("--fds-control-slow-duration"));
	});

	function getCalendarDays(date) {
		const year = date.getFullYear();
		const month = date.getMonth();
		const firstWeekday = new Date(year, month, 1).getDay();
		const calendarRows = 6;
		let days = [];
		let nextMonth = month + 1;
		let lastMonth = month - 1;
		let nextMonthYear = year;
		let lastMonthYear = year;
		const daysBefore = (firstWeekday - weekStart + 7) % 7;

		if (daysBefore > 0) {
			if (lastMonth === -1) {
				lastMonth = 11;
				lastMonthYear = year - 1;
			}

			days = getMonthDays(lastMonthYear, lastMonth).slice(-daysBefore);
		}

		days = days.concat(getMonthDays(year, month));

		if (nextMonth === 12) {
			nextMonth = 0;
			nextMonthYear = year + 1;
		}

		const daysAfter = 7 * calendarRows - days.length;
		days = days.concat(getMonthDays(nextMonthYear, nextMonth).slice(0, daysAfter));
		return days;
	}

	function updatePage(amount = 0, directionOverride = undefined) {
		$$invalidate(11, page = getPageByOffset(amount, page, view));

		if (directionOverride) {
			$$invalidate(14, pageAnimationDirection = directionOverride);
			return;
		}

		if (amount <= -1) {
			$$invalidate(14, pageAnimationDirection = "up");
		} else if (amount >= 1) {
			$$invalidate(14, pageAnimationDirection = "down");
		} else {
			$$invalidate(14, pageAnimationDirection = "neutral");
		}
	}

	function updateView(newView) {
		if (view === "days" && newView === "months" || view === "months" && newView === "years") {
			$$invalidate(13, viewAnimationDirection = "up");
		} else if (view === "years" && newView === "months" || view === "months" && newView === "days") {
			$$invalidate(13, viewAnimationDirection = "down");
		} else {
			$$invalidate(13, viewAnimationDirection = "neutral");
		}

		$$invalidate(14, pageAnimationDirection = "neutral");
		$$invalidate(1, view = newView);
	}

	async function handleKeyDown(event, date) {
		const { key } = event;

		if (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowLeft" || key === "ArrowRight" || key === "Home" || key === "End") {
			event.preventDefault();
		}

		if (event.ctrlKey && (key === "ArrowUp" || key === "ArrowDown")) {
			if (key === "ArrowUp") {
				updateView(view === "days" ? "months" : "years");
			} else if (key === "ArrowDown") {
				updateView(view === "years" ? "months" : "days");
			}

			return;
		}

		let focusOrder = bodyElement.querySelectorAll("button");
		let focusedDate = date;
		const focusIndex = Array.from(focusOrder).indexOf(document.activeElement);
		if (focusOrder.length === 0) return;

		if (view === "days") {
			let focusIncrementAmount = {
				ArrowUp: -7,
				ArrowDown: 7,
				ArrowLeft: -1,
				ArrowRight: 1
			};

			if (!focusIncrementAmount[key] || event.shiftKey) return;
			focusedDate = new Date(new Date(focusedDate).setDate(focusedDate.getDate() + focusIncrementAmount[key]));
			const nextDateIsBlackout = blackout && indexOfDate(blackout, focusedDate, "day") > -1;

			if (nextDateIsBlackout) {
				focusedDate.setDate(focusedDate.getDate() + focusIncrementAmount[key]);
			}

			const calendarDays = getCalendarDays(focusedDate);
			const newFocusedDate = calendarDays.find(day => compareDates(day, focusedDate, "time"));
			if (min > newFocusedDate || max < newFocusedDate) return;

			if (focusedDate.getMonth() !== page.getMonth()) {
				if (key === "ArrowLeft" || key === "ArrowUp") {
					updatePage(-1, "neutral");
				} else if (key === "ArrowRight" || key === "ArrowDown") {
					updatePage(1, "neutral");
				}

				await tick();
				focusOrder = bodyElement.querySelectorAll("button");
				focusedDate = newFocusedDate;

				focusOrder === null || focusOrder === void 0
				? void 0
				: focusOrder[calendarDays.indexOf(newFocusedDate)].focus();

				return;
			}

			focusOrder === null || focusOrder === void 0
			? void 0
			: focusOrder[focusIndex + focusIncrementAmount[key] * (nextDateIsBlackout ? 2 : 1)].focus();
		} else if (view === "months" || view === "years") {
			let calendar = [];

			const focusIncrementAmount = {
				ArrowUp: -4,
				ArrowDown: 4,
				ArrowLeft: -1,
				ArrowRight: 1
			};

			if (!focusIncrementAmount[key] || event.shiftKey) return;

			if (view === "months") {
				focusedDate = new Date(new Date(focusedDate).setMonth(focusedDate.getMonth() + focusIncrementAmount[key], 1));
			} else {
				focusedDate = new Date(new Date(focusedDate).setFullYear(focusedDate.getFullYear() + focusIncrementAmount[key]));
			}

			calendar = view === "months"
			? getCalendarMonths(focusedDate)
			: getCalendarYears(focusedDate);

			const newFocusedDate = calendar.find(day => compareDates(day, focusedDate, view === "months" ? "month" : "year"));

			const aboveMinimumMonths = (min === null || min === void 0 ? void 0 : min.getMonth()) > newFocusedDate.getMonth() && (min === null || min === void 0
			? void 0
			: min.getFullYear()) === newFocusedDate.getFullYear();

			const aboveMinimumYears = (min === null || min === void 0
			? void 0
			: min.getFullYear()) > newFocusedDate.getFullYear();

			if ((view === "months"
			? aboveMinimumMonths
			: aboveMinimumYears) || max < newFocusedDate) return;

			if (!compareDates(focusedDate, page, view === "months" ? "year" : "decade")) {
				if (key === "ArrowLeft" || key === "ArrowUp") {
					updatePage(-1, "neutral");
				} else if (key === "ArrowRight" || key === "ArrowDown") {
					updatePage(1, "neutral");
				}

				await tick();
				focusedDate = newFocusedDate;
				focusOrder = bodyElement.querySelectorAll("button");

				focusOrder === null || focusOrder === void 0
				? void 0
				: focusOrder[calendar.indexOf(newFocusedDate)].focus();

				return;
			}

			focusOrder === null || focusOrder === void 0
			? void 0
			: focusOrder[focusIndex + focusIncrementAmount[key]].focus();
		}
	}

	function selectDay(day) {
		if (multiple) {
			if (!Array.isArray(value)) {
				if (value !== null) {
					$$invalidate(0, value = [value]);
				} else {
					$$invalidate(0, value = [day]);
					return;
				}
			}

			if (indexOfDate(value, day) === -1) {
				value.push(day);
				$$invalidate(0, value);
			} else {
				$$invalidate(0, value = value.slice(0, indexOfDate(value, day)).concat(value.slice(indexOfDate(value, day) + 1)));
			}
		} else {
			if (Array.isArray(value)) $$invalidate(0, value = null);

			if (day.getTime() === (value === null || value === void 0
			? void 0
			: value.getTime())) {
				$$invalidate(0, value = null);
			} else {
				$$invalidate(0, value = day);
			}
		}

		dispatch("change", value);
	}

	function selectMonth(month) {
		$$invalidate(11, page = new Date(new Date(month.setDate(1))));
		updateView("days");
	}

	function selectYear(month) {
		page.setFullYear(month.getFullYear());
		updateView("months");
	}

	const click_handler = () => updateView(view === "days" ? "months" : "years");
	const click_handler_1 = () => updatePage(-1);
	const click_handler_2 = () => updatePage(1);
	const click_handler_3 = day => selectDay(day);
	const keydown_handler = (day, e) => handleKeyDown(e, day);
	const click_handler_4 = month => selectMonth(month);
	const keydown_handler_1 = (month, e) => handleKeyDown(e, month);
	const click_handler_5 = year => selectYear(year);
	const keydown_handler_2 = (year, e) => handleKeyDown(e, year);

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(2, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(26, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('locale' in $$new_props) $$invalidate(3, locale = $$new_props.locale);
		if ('multiple' in $$new_props) $$invalidate(27, multiple = $$new_props.multiple);
		if ('headers' in $$new_props) $$invalidate(4, headers = $$new_props.headers);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('blackout' in $$new_props) $$invalidate(5, blackout = $$new_props.blackout);
		if ('min' in $$new_props) $$invalidate(6, min = $$new_props.min);
		if ('max' in $$new_props) $$invalidate(7, max = $$new_props.max);
		if ('view' in $$new_props) $$invalidate(1, view = $$new_props.view);
		if ('weekStart' in $$new_props) $$invalidate(8, weekStart = $$new_props.weekStart);
		if ('__floating' in $$new_props) $$invalidate(9, __floating = $$new_props.__floating);
		if ('class' in $$new_props) $$invalidate(10, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(2, element = $$new_props.element);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value*/ 1) {
			$: firstValue = Array.isArray(value) ? value[0] : value;
		}

		if ($$self.$$.dirty[0] & /*view*/ 2) {
			$: (view, updatePage(0));
		}

		if ($$self.$$.dirty[0] & /*page, view*/ 2050) {
			$: $$invalidate(16, nextPage = getPageByOffset(1, page, view));
		}

		if ($$self.$$.dirty[0] & /*view, locale, page*/ 2058) {
			$: if (view === "days") {
				$$invalidate(12, header = new Intl.DateTimeFormat(locale, { year: "numeric", month: "long" }).format(page));
			} else if (view === "months") {
				$$invalidate(12, header = new Intl.DateTimeFormat(locale, { year: "numeric" }).format(page));
			} else if (view === "years") {
				const decadeStart = Math.floor(page.getFullYear() / 10) * 10;
				const decadeEnd = decadeStart + 9;

				// https://github.com/microsoft/TypeScript/issues/46905
				$$invalidate(12, header = new Intl.DateTimeFormat(locale, { year: "numeric" }).formatRange(new Date(decadeStart, 0, 1), new Date(decadeEnd, 0, 1)));
			}
		}
	};

	return [
		value,
		view,
		element,
		locale,
		headers,
		blackout,
		min,
		max,
		weekStart,
		__floating,
		className,
		page,
		header,
		viewAnimationDirection,
		pageAnimationDirection,
		pageAnimationDuration,
		nextPage,
		forwardEvents,
		bodyElementBinding,
		getCalendarDays,
		updatePage,
		updateView,
		handleKeyDown,
		selectDay,
		selectMonth,
		selectYear,
		$$restProps,
		multiple,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		keydown_handler,
		click_handler_4,
		keydown_handler_1,
		click_handler_5,
		keydown_handler_2,
		div3_binding
	];
}

class CalendarView extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				locale: 3,
				multiple: 27,
				headers: 4,
				value: 0,
				blackout: 5,
				min: 6,
				max: 7,
				view: 1,
				weekStart: 8,
				__floating: 9,
				class: 10,
				element: 2
			},
			add_css,
			[-1, -1]
		);
	}
}

export default CalendarView;