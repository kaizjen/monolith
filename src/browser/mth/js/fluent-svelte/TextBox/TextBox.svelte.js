/* $svelte\fluent-svelte-raw\TextBox\TextBox.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	add_flush_callback,
	append,
	append_styles,
	assign,
	attr,
	bind,
	binding_callbacks,
	bubble,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_attributes,
	set_input_value,
	space,
	svg_element,
	to_number,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { createEventDispatcher } from "mth://.svelte/internal";
import { get_current_component } from "mth://.svelte/internal";
import { externalMouseEvents, createEventForwarder } from "../internal";
import TextBoxButton from "../TextBox/TextBoxButton.svelte";

function add_css(target) {
	append_styles(target, "svelte-8l6kgi", ".text-box.svelte-8l6kgi.svelte-8l6kgi{background-color:transparent;border:none;border-radius:var(--fds-control-corner-radius);box-sizing:border-box;color:var(--fds-text-primary);cursor:unset;flex:1 1 auto;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:100%;line-height:20px;margin:0;min-block-size:30px;outline:none;padding-inline:10px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.text-box.svelte-8l6kgi.svelte-8l6kgi::-moz-placeholder{color:var(--fds-text-secondary);-moz-user-select:none;user-select:none}.text-box.svelte-8l6kgi.svelte-8l6kgi:-ms-input-placeholder{color:var(--fds-text-secondary);-ms-user-select:none;user-select:none}.text-box.svelte-8l6kgi.svelte-8l6kgi::placeholder{color:var(--fds-text-secondary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.text-box.svelte-8l6kgi.svelte-8l6kgi::-webkit-search-cancel-button,.text-box.svelte-8l6kgi.svelte-8l6kgi::-webkit-search-decoration,.text-box.svelte-8l6kgi.svelte-8l6kgi::-webkit-search-results-button,.text-box.svelte-8l6kgi.svelte-8l6kgi::-webkit-search-results-decoration{-webkit-appearance:none}.text-box.svelte-8l6kgi.svelte-8l6kgi::-ms-reveal{display:none}.text-box.svelte-8l6kgi.svelte-8l6kgi:disabled{color:var(--fds-text-disabled)}.text-box.svelte-8l6kgi.svelte-8l6kgi:disabled::-moz-placeholder{color:var(--fds-text-disabled)}.text-box.svelte-8l6kgi.svelte-8l6kgi:disabled:-ms-input-placeholder{color:var(--fds-text-disabled)}.text-box.svelte-8l6kgi.svelte-8l6kgi:disabled::placeholder{color:var(--fds-text-disabled)}.text-box-container.svelte-8l6kgi.svelte-8l6kgi{align-items:center;background-clip:padding-box;background-color:var(--fds-control-fill-default);border:1px solid var(--fds-control-stroke-default);border-radius:var(--fds-control-corner-radius);cursor:text;display:flex;inline-size:100%;position:relative}.text-box-container.svelte-8l6kgi.svelte-8l6kgi:hover{background-color:var(--fds-control-fill-secondary)}.text-box-container.disabled.svelte-8l6kgi.svelte-8l6kgi{background-color:var(--fds-control-fill-disabled);cursor:default}.text-box-container.disabled.svelte-8l6kgi .text-box-underline.svelte-8l6kgi{display:none}.text-box-container.svelte-8l6kgi.svelte-8l6kgi:focus-within{background-color:var(--fds-control-fill-input-active)}.text-box-container.svelte-8l6kgi:focus-within .text-box.svelte-8l6kgi::-moz-placeholder{color:var(--fds-text-tertiary)}.text-box-container.svelte-8l6kgi:focus-within .text-box.svelte-8l6kgi:-ms-input-placeholder{color:var(--fds-text-tertiary)}.text-box-container.svelte-8l6kgi:focus-within .text-box.svelte-8l6kgi::placeholder{color:var(--fds-text-tertiary)}.text-box-container.svelte-8l6kgi:focus-within .text-box-underline.svelte-8l6kgi:after{border-bottom:2px solid var(--fds-accent-default)}.text-box-container.svelte-8l6kgi:focus-within .text-box-clear-button{display:flex}.text-box-underline.svelte-8l6kgi.svelte-8l6kgi{block-size:calc(100% + 2px);border-radius:var(--fds-control-corner-radius);inline-size:calc(100% + 2px);inset-block-start:-1px;inset-inline-start:-1px;overflow:hidden;pointer-events:none;position:absolute}.text-box-underline.svelte-8l6kgi.svelte-8l6kgi:after{block-size:100%;border-bottom:1px solid var(--fds-control-strong-stroke-default);box-sizing:border-box;content:\"\";inline-size:100%;inset-block-end:0;inset-inline-start:0;position:absolute}.text-box-buttons.svelte-8l6kgi.svelte-8l6kgi{align-items:center;cursor:default;display:flex;flex:0 0 auto}.text-box-buttons.svelte-8l6kgi>.text-box-button{-webkit-margin-start:6px;margin-inline-start:6px}.text-box-buttons.svelte-8l6kgi>.text-box-button:first-of-type{-webkit-margin-start:0;margin-inline-start:0}.text-box-buttons.svelte-8l6kgi>.text-box-button:last-of-type{-webkit-margin-end:4px;margin-inline-end:4px}.text-box-buttons.svelte-8l6kgi .text-box-clear-button{display:none}");
}

const get_buttons_slot_changes = dirty => ({ value: dirty[0] & /*value*/ 1 });
const get_buttons_slot_context = ctx => ({ value: /*value*/ ctx[0] });

// (115:28) 
function create_if_block_15(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "week" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_11*/ ctx[45](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_11*/ ctx[44]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "week" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_11*/ ctx[45](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (113:28) 
function create_if_block_14(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "time" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_10*/ ctx[43](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_10*/ ctx[42]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "time" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_10*/ ctx[43](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (111:29) 
function create_if_block_13(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "month" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_9*/ ctx[41](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_9*/ ctx[40]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "month" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_9*/ ctx[41](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (109:38) 
function create_if_block_12(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "datetime-local" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_8*/ ctx[39](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_8*/ ctx[38]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "datetime-local" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_8*/ ctx[39](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (107:28) 
function create_if_block_11(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "date" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_7*/ ctx[37](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_7*/ ctx[36]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "date" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_7*/ ctx[37](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (105:27) 
function create_if_block_10(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "url" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_6*/ ctx[35](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_6*/ ctx[34]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "url" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_6*/ ctx[35](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (103:27) 
function create_if_block_9(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "tel" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_5*/ ctx[33](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_5*/ ctx[32]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "tel" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_5*/ ctx[33](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (101:29) 
function create_if_block_8(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "email" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_4*/ ctx[31](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_4*/ ctx[30]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "email" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_4*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (99:32) 
function create_if_block_7(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "password" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_3*/ ctx[29](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_3*/ ctx[28]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "password" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_3*/ ctx[29](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (97:30) 
function create_if_block_6(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "search" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_2*/ ctx[27](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_2*/ ctx[26]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "search" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_2*/ ctx[27](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (95:30) 
function create_if_block_5(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "number" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding_1*/ ctx[25](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler_1*/ ctx[24]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "number" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1 && to_number(input.value) !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding_1*/ ctx[25](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (93:1) {#if type === "text"}
function create_if_block_4(ctx) {
	let input;
	let forwardEvents_action;
	let mounted;
	let dispose;
	let input_levels = [{ type: "text" }, /*inputProps*/ ctx[18]];
	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "svelte-8l6kgi", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			set_input_value(input, /*value*/ ctx[0]);
			/*input_binding*/ ctx[23](input);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[22]),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[14].call(null, input))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [{ type: "text" }, /*inputProps*/ ctx[18]]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "svelte-8l6kgi", true);
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[23](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (120:2) {#if !disabled}
function create_if_block(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*clearButton*/ ctx[8] && /*value*/ ctx[0] && !/*readonly*/ ctx[11] && create_if_block_3(ctx);
	let if_block1 = /*type*/ ctx[7] === "search" && /*searchButton*/ ctx[9] && create_if_block_2(ctx);
	let if_block2 = /*type*/ ctx[7] === "password" && /*value*/ ctx[0] && /*revealButton*/ ctx[10] && create_if_block_1(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*clearButton*/ ctx[8] && /*value*/ ctx[0] && !/*readonly*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*clearButton, value, readonly*/ 2305) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*type*/ ctx[7] === "search" && /*searchButton*/ ctx[9]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*type, searchButton*/ 640) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*type*/ ctx[7] === "password" && /*value*/ ctx[0] && /*revealButton*/ ctx[10]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*type, value, revealButton*/ 1153) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (121:3) {#if clearButton && value && !readonly}
function create_if_block_3(ctx) {
	let textboxbutton;
	let updating_element;
	let current;

	function textboxbutton_element_binding(value) {
		/*textboxbutton_element_binding*/ ctx[46](value);
	}

	let textboxbutton_props = {
		class: "text-box-clear-button",
		"aria-label": "Clear value",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*clearButtonElement*/ ctx[4] !== void 0) {
		textboxbutton_props.element = /*clearButtonElement*/ ctx[4];
	}

	textboxbutton = new TextBoxButton({ props: textboxbutton_props });
	binding_callbacks.push(() => bind(textboxbutton, 'element', textboxbutton_element_binding));
	textboxbutton.$on("click", /*handleClear*/ ctx[15]);

	return {
		c() {
			create_component(textboxbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textboxbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 1048576) {
				textboxbutton_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty[0] & /*clearButtonElement*/ 16) {
				updating_element = true;
				textboxbutton_changes.element = /*clearButtonElement*/ ctx[4];
				add_flush_callback(() => updating_element = false);
			}

			textboxbutton.$set(textboxbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textboxbutton, detaching);
		}
	};
}

// (122:4) <TextBoxButton       class="text-box-clear-button"       aria-label="Clear value"       on:click={handleClear}       bind:element={clearButtonElement}      >
function create_default_slot_2(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "fill", "currentColor");
			attr(path, "d", "M2.08859 2.21569L2.14645 2.14645C2.32001 1.97288 2.58944 1.9536 2.78431 2.08859L2.85355 2.14645L6 5.293L9.14645 2.14645C9.34171 1.95118 9.65829 1.95118 9.85355 2.14645C10.0488 2.34171 10.0488 2.65829 9.85355 2.85355L6.707 6L9.85355 9.14645C10.0271 9.32001 10.0464 9.58944 9.91141 9.78431L9.85355 9.85355C9.67999 10.0271 9.41056 10.0464 9.21569 9.91141L9.14645 9.85355L6 6.707L2.85355 9.85355C2.65829 10.0488 2.34171 10.0488 2.14645 9.85355C1.95118 9.65829 1.95118 9.34171 2.14645 9.14645L5.293 6L2.14645 2.85355C1.97288 2.67999 1.9536 2.41056 2.08859 2.21569L2.14645 2.14645L2.08859 2.21569Z");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "12");
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 12 12");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (142:3) {#if type === "search" && searchButton}
function create_if_block_2(ctx) {
	let textboxbutton;
	let updating_element;
	let current;

	function textboxbutton_element_binding_1(value) {
		/*textboxbutton_element_binding_1*/ ctx[47](value);
	}

	let textboxbutton_props = {
		"aria-label": "Search",
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*searchButtonElement*/ ctx[5] !== void 0) {
		textboxbutton_props.element = /*searchButtonElement*/ ctx[5];
	}

	textboxbutton = new TextBoxButton({ props: textboxbutton_props });
	binding_callbacks.push(() => bind(textboxbutton, 'element', textboxbutton_element_binding_1));
	textboxbutton.$on("click", /*handleSearch*/ ctx[16]);

	return {
		c() {
			create_component(textboxbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textboxbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 1048576) {
				textboxbutton_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty[0] & /*searchButtonElement*/ 32) {
				updating_element = true;
				textboxbutton_changes.element = /*searchButtonElement*/ ctx[5];
				add_flush_callback(() => updating_element = false);
			}

			textboxbutton.$set(textboxbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textboxbutton, detaching);
		}
	};
}

// (143:4) <TextBoxButton       aria-label="Search"       on:click={handleSearch}       bind:element={searchButtonElement}      >
function create_default_slot_1(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M5.00038 1C2.79103 1 1 2.7909 1 5.00008C1 7.20927 2.79103 9.00017 5.00038 9.00017C5.92463 9.00017 6.77568 8.68675 7.45302 8.1604L10.1464 10.8536C10.3416 11.0488 10.6583 11.0488 10.8535 10.8536C11.0488 10.6583 11.0488 10.3417 10.8535 10.1464L8.16028 7.45337C8.68705 6.77595 9.00075 5.92465 9.00075 5.00008C9.00075 2.7909 7.20972 1 5.00038 1ZM2.00009 5.00008C2.00009 3.34319 3.34337 2.00002 5.00038 2.00002C6.65739 2.00002 8.00066 3.34319 8.00066 5.00008C8.00066 6.65697 6.65739 8.00015 5.00038 8.00015C3.34337 8.00015 2.00009 6.65697 2.00009 5.00008Z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "12");
			attr(svg, "height", "12");
			attr(svg, "viewBox", "0 0 12 12");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (162:3) {#if type === "password" && value && revealButton}
function create_if_block_1(ctx) {
	let textboxbutton;
	let updating_element;
	let current;

	function textboxbutton_element_binding_2(value) {
		/*textboxbutton_element_binding_2*/ ctx[48](value);
	}

	let textboxbutton_props = {
		"aria-label": "Reveal password",
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*revealButtonElement*/ ctx[6] !== void 0) {
		textboxbutton_props.element = /*revealButtonElement*/ ctx[6];
	}

	textboxbutton = new TextBoxButton({ props: textboxbutton_props });
	binding_callbacks.push(() => bind(textboxbutton, 'element', textboxbutton_element_binding_2));
	textboxbutton.$on("mousedown", /*handleReveal*/ ctx[17]);

	return {
		c() {
			create_component(textboxbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(textboxbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const textboxbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 1048576) {
				textboxbutton_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty[0] & /*revealButtonElement*/ 64) {
				updating_element = true;
				textboxbutton_changes.element = /*revealButtonElement*/ ctx[6];
				add_flush_callback(() => updating_element = false);
			}

			textboxbutton.$set(textboxbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(textboxbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(textboxbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(textboxbutton, detaching);
		}
	};
}

// (163:4) <TextBoxButton       aria-label="Reveal password"       on:mousedown={handleReveal}       bind:element={revealButtonElement}      >
function create_default_slot(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M0,554.5C0,550.833 0.5,547.167 1.5,543.5C11.5,505.833 25.75,470.417 44.25,437.25C62.75,404.083 84.5833,373.667 109.75,346C134.917,318.333 162.75,293.667 193.25,272C223.75,250.333 256.25,231.917 290.75,216.75C325.25,201.583 361.167,190.083 398.5,182.25C435.833,174.417 473.667,170.5 512,170.5C550,170.5 587.583,174.417 624.75,182.25C661.917,190.083 697.75,201.5 732.25,216.5C766.75,231.5 799.417,249.917 830.25,271.75C861.083,293.583 889.083,318.25 914.25,345.75C939.417,373.25 961.25,403.5 979.75,436.5C998.25,469.5 1012.5,504.833 1022.5,542.5C1023.5,546.167 1024,550 1024,554C1024,566 1019.92,576.083 1011.75,584.25C1003.58,592.417 993.5,596.5 981.5,596.5C971.5,596.5 962.917,593.667 955.75,588C948.583,582.333 943.333,574.833 940,565.5C937,556.167 934.083,547.5 931.25,539.5C928.417,531.5 925.5,523.583 922.5,515.75C919.5,507.917 916.167,500.167 912.5,492.5C908.833,484.833 904.333,476.667 899,468C879.333,435 855.583,405.417 827.75,379.25C799.917,353.083 769.333,330.917 736,312.75C702.667,294.583 667.417,280.583 630.25,270.75C593.083,260.917 555.5,256 517.5,256L506.5,256C468.5,256 430.917,260.917 393.75,270.75C356.583,280.583 321.333,294.667 288,313C254.667,331.333 224,353.583 196,379.75C168,405.917 144.333,435.5 125,468.5C119.667,477.167 115.167,485.417 111.5,493.25C107.833,501.083 104.5,508.833 101.5,516.5C98.5,524.167 95.5833,532 92.75,540C89.9167,548 87,556.667 84,566C80.6667,575.333 75.5,582.917 68.5,588.75C61.5,594.583 52.8333,597.5 42.5,597.5C36.8333,597.5 31.4167,596.333 26.25,594C21.0833,591.667 16.5833,588.583 12.75,584.75C8.91667,580.917 5.83333,576.417 3.5,571.25C1.16667,566.083 0,560.5 0,554.5ZM256,597.5L256,592.5C256,557.833 262.917,525.25 276.75,494.75C290.583,464.25 309.25,437.667 332.75,415C356.25,392.333 383.417,374.417 414.25,361.25C445.083,348.083 477.667,341.5 512,341.5C547.333,341.5 580.583,348.167 611.75,361.5C642.917,374.833 670.083,393.083 693.25,416.25C716.417,439.417 734.667,466.583 748,497.75C761.333,528.917 768,562.167 768,597.5C768,632.833 761.333,666.083 748,697.25C734.667,728.417 716.417,755.583 693.25,778.75C670.083,801.917 642.917,820.167 611.75,833.5C580.583,846.833 547.333,853.5 512,853.5C476.667,853.5 443.417,846.833 412.25,833.5C381.083,820.167 353.917,801.917 330.75,778.75C307.583,755.583 289.333,728.417 276,697.25C262.667,666.083 256,632.833 256,597.5ZM682.5,597.5L682.5,594C682.5,571 677.917,549.333 668.75,529C659.583,508.667 647.167,490.917 631.5,475.75C615.833,460.583 597.667,448.583 577,439.75C556.333,430.917 534.667,426.5 512,426.5C488.333,426.5 466.167,431 445.5,440C424.833,449 406.833,461.25 391.5,476.75C376.167,492.25 364,510.417 355,531.25C346,552.083 341.5,574.167 341.5,597.5C341.5,621.167 346,643.333 355,664C364,684.667 376.167,702.667 391.5,718C406.833,733.333 424.833,745.5 445.5,754.5C466.167,763.5 488.333,768 512,768C535.333,768 557.417,763.5 578.25,754.5C599.083,745.5 617.167,733.333 632.5,718C647.833,702.667 660,684.667 669,664C678,643.333 682.5,621.167 682.5,597.5Z");
			attr(path, "fill", "currentColor");
			attr(svg, "aria-hidden", "true");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "10");
			attr(svg, "height", "10");
			attr(svg, "viewBox", "0 171 1024 683");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let t0;
	let div0;
	let t1;
	let div1;
	let t2;
	let t3;
	let div2_class_value;
	let externalMouseEvents_action;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[7] === "text") return create_if_block_4;
		if (/*type*/ ctx[7] === "number") return create_if_block_5;
		if (/*type*/ ctx[7] === "search") return create_if_block_6;
		if (/*type*/ ctx[7] === "password") return create_if_block_7;
		if (/*type*/ ctx[7] === "email") return create_if_block_8;
		if (/*type*/ ctx[7] === "tel") return create_if_block_9;
		if (/*type*/ ctx[7] === "url") return create_if_block_10;
		if (/*type*/ ctx[7] === "date") return create_if_block_11;
		if (/*type*/ ctx[7] === "datetime-local") return create_if_block_12;
		if (/*type*/ ctx[7] === "month") return create_if_block_13;
		if (/*type*/ ctx[7] === "time") return create_if_block_14;
		if (/*type*/ ctx[7] === "week") return create_if_block_15;
	}

	let current_block_type = select_block_type(ctx, [-1, -1]);
	let if_block0 = current_block_type && current_block_type(ctx);
	let if_block1 = !/*disabled*/ ctx[12] && create_if_block(ctx);
	const buttons_slot_template = /*#slots*/ ctx[20].buttons;
	const buttons_slot = create_slot(buttons_slot_template, ctx, /*$$scope*/ ctx[51], get_buttons_slot_context);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[51], null);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			t1 = space();
			div1 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			if (buttons_slot) buttons_slot.c();
			t3 = space();
			if (default_slot) default_slot.c();
			attr(div0, "class", "text-box-underline svelte-8l6kgi");
			attr(div1, "class", "text-box-buttons svelte-8l6kgi");
			attr(div2, "class", div2_class_value = "text-box-container " + /*className*/ ctx[13] + " svelte-8l6kgi");
			toggle_class(div2, "disabled", /*disabled*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			append(div2, div0);
			append(div2, t1);
			append(div2, div1);
			if (if_block1) if_block1.m(div1, null);
			append(div1, t2);

			if (buttons_slot) {
				buttons_slot.m(div1, null);
			}

			/*div1_binding*/ ctx[49](div1);
			append(div2, t3);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			/*div2_binding*/ ctx[50](div2);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(externalMouseEvents_action = externalMouseEvents.call(null, div2, { type: "mousedown" })),
					listen(div2, "outermousedown", /*outermousedown_handler*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div2, t0);
				}
			}

			if (!/*disabled*/ ctx[12]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*disabled*/ 4096) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (buttons_slot) {
				if (buttons_slot.p && (!current || dirty[0] & /*value*/ 1 | dirty[1] & /*$$scope*/ 1048576)) {
					update_slot_base(
						buttons_slot,
						buttons_slot_template,
						ctx,
						/*$$scope*/ ctx[51],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[51])
						: get_slot_changes(buttons_slot_template, /*$$scope*/ ctx[51], dirty, get_buttons_slot_changes),
						get_buttons_slot_context
					);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 1048576)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[51],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[51])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[51], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*className*/ 8192 && div2_class_value !== (div2_class_value = "text-box-container " + /*className*/ ctx[13] + " svelte-8l6kgi")) {
				attr(div2, "class", div2_class_value);
			}

			if (dirty[0] & /*className, disabled*/ 12288) {
				toggle_class(div2, "disabled", /*disabled*/ ctx[12]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(buttons_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(buttons_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);

			if (if_block0) {
				if_block0.d();
			}

			if (if_block1) if_block1.d();
			if (buttons_slot) buttons_slot.d(detaching);
			/*div1_binding*/ ctx[49](null);
			if (default_slot) default_slot.d(detaching);
			/*div2_binding*/ ctx[50](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","type","placeholder","clearButton","searchButton","revealButton","readonly","disabled","class","inputElement","containerElement","buttonsContainerElement","clearButtonElement","searchButtonElement","revealButtonElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = undefined } = $$props;
	let { clearButton = true } = $$props;
	let { searchButton = true } = $$props;
	let { revealButton = true } = $$props;
	let { readonly = false } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	let { buttonsContainerElement = null } = $$props;
	let { clearButtonElement = null } = $$props;
	let { searchButtonElement = null } = $$props;
	let { revealButtonElement = null } = $$props;
	const dispatch = createEventDispatcher();
	const forwardEvents = createEventForwarder(get_current_component(), ["clear", "search", "reveal", "outermousedown"]);

	function handleClear(event) {
		dispatch("clear", event);
		inputElement.focus();
		$$invalidate(0, value = "");
	}

	function handleSearch(event) {
		dispatch("search", event);
		inputElement.focus();
	}

	function handleReveal(event) {
		inputElement.focus();
		inputElement.setAttribute("type", "text");
		dispatch("reveal", event);
		let revealButtonMouseDown = true;

		const hidePassword = () => {
			if (!revealButtonMouseDown) return;
			inputElement.focus();
			revealButtonMouseDown = false;
			inputElement.setAttribute("type", "password");
			window.removeEventListener("mouseup", hidePassword);
		};

		window.addEventListener("mouseup", hidePassword);
	}

	const inputProps = {
		class: "text-box",
		disabled: disabled || undefined,
		readonly: readonly || undefined,
		placeholder: placeholder || undefined,
		...$$restProps
	};

	function outermousedown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_1() {
		value = to_number(this.value);
		$$invalidate(0, value);
	}

	function input_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_2() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_2($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_3() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_3($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_4() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_4($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_5() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_5($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_6() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_6($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_7() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_7($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_8() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_8($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_9() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_9($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_10() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_10($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function input_input_handler_11() {
		value = this.value;
		$$invalidate(0, value);
	}

	function input_binding_11($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function textboxbutton_element_binding(value) {
		clearButtonElement = value;
		$$invalidate(4, clearButtonElement);
	}

	function textboxbutton_element_binding_1(value) {
		searchButtonElement = value;
		$$invalidate(5, searchButtonElement);
	}

	function textboxbutton_element_binding_2(value) {
		revealButtonElement = value;
		$$invalidate(6, revealButtonElement);
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonsContainerElement = $$value;
			$$invalidate(3, buttonsContainerElement);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(2, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('type' in $$new_props) $$invalidate(7, type = $$new_props.type);
		if ('placeholder' in $$new_props) $$invalidate(19, placeholder = $$new_props.placeholder);
		if ('clearButton' in $$new_props) $$invalidate(8, clearButton = $$new_props.clearButton);
		if ('searchButton' in $$new_props) $$invalidate(9, searchButton = $$new_props.searchButton);
		if ('revealButton' in $$new_props) $$invalidate(10, revealButton = $$new_props.revealButton);
		if ('readonly' in $$new_props) $$invalidate(11, readonly = $$new_props.readonly);
		if ('disabled' in $$new_props) $$invalidate(12, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(13, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(2, containerElement = $$new_props.containerElement);
		if ('buttonsContainerElement' in $$new_props) $$invalidate(3, buttonsContainerElement = $$new_props.buttonsContainerElement);
		if ('clearButtonElement' in $$new_props) $$invalidate(4, clearButtonElement = $$new_props.clearButtonElement);
		if ('searchButtonElement' in $$new_props) $$invalidate(5, searchButtonElement = $$new_props.searchButtonElement);
		if ('revealButtonElement' in $$new_props) $$invalidate(6, revealButtonElement = $$new_props.revealButtonElement);
		if ('$$scope' in $$new_props) $$invalidate(51, $$scope = $$new_props.$$scope);
	};

	return [
		value,
		inputElement,
		containerElement,
		buttonsContainerElement,
		clearButtonElement,
		searchButtonElement,
		revealButtonElement,
		type,
		clearButton,
		searchButton,
		revealButton,
		readonly,
		disabled,
		className,
		forwardEvents,
		handleClear,
		handleSearch,
		handleReveal,
		inputProps,
		placeholder,
		slots,
		outermousedown_handler,
		input_input_handler,
		input_binding,
		input_input_handler_1,
		input_binding_1,
		input_input_handler_2,
		input_binding_2,
		input_input_handler_3,
		input_binding_3,
		input_input_handler_4,
		input_binding_4,
		input_input_handler_5,
		input_binding_5,
		input_input_handler_6,
		input_binding_6,
		input_input_handler_7,
		input_binding_7,
		input_input_handler_8,
		input_binding_8,
		input_input_handler_9,
		input_binding_9,
		input_input_handler_10,
		input_binding_10,
		input_input_handler_11,
		input_binding_11,
		textboxbutton_element_binding,
		textboxbutton_element_binding_1,
		textboxbutton_element_binding_2,
		div1_binding,
		div2_binding,
		$$scope
	];
}

class TextBox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				value: 0,
				type: 7,
				placeholder: 19,
				clearButton: 8,
				searchButton: 9,
				revealButton: 10,
				readonly: 11,
				disabled: 12,
				class: 13,
				inputElement: 1,
				containerElement: 2,
				buttonsContainerElement: 3,
				clearButtonElement: 4,
				searchButtonElement: 5,
				revealButtonElement: 6
			},
			add_css,
			[-1, -1]
		);
	}
}

export default TextBox;