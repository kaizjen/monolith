/* $svelte\fluent-svelte-raw\MenuFlyout\MenuFlyoutWrapper.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	add_flush_callback,
	append,
	append_styles,
	assign,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_style,
	space,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { tabbable } from "../tabbable";
import { createEventDispatcher, setContext } from "mth://.svelte/internal";
import { arrowNavigation, uid } from "../internal";
import MenuFlyoutSurface from "./MenuFlyoutSurface.svelte";

function add_css(target) {
	append_styles(target, "svelte-as1gqa", ".menu-flyout-wrapper.svelte-as1gqa{display:inline-block;height:auto;position:relative}.menu-flyout-backdrop.svelte-as1gqa{height:100%;left:0;position:fixed;top:0;width:100%;z-index:9999}.menu-flyout-anchor.svelte-as1gqa{position:absolute;z-index:10000}.menu-flyout-anchor.placement-top.svelte-as1gqa{--fds-menu-flyout-transition-offset:50%;bottom:calc(100% + var(--fds-menu-flyout-offset))}.menu-flyout-anchor.placement-bottom.svelte-as1gqa{top:calc(100% + var(--fds-menu-flyout-offset))}.menu-flyout-anchor.placement-left.svelte-as1gqa{right:calc(100% + var(--fds-menu-flyout-offset))}.menu-flyout-anchor.placement-right.svelte-as1gqa{left:calc(100% + var(--fds-menu-flyout-offset))}.menu-flyout-anchor.placement-bottom.alignment-start.svelte-as1gqa,.menu-flyout-anchor.placement-top.alignment-start.svelte-as1gqa{inset-inline-start:0}.menu-flyout-anchor.placement-bottom.alignment-end.svelte-as1gqa,.menu-flyout-anchor.placement-top.alignment-end.svelte-as1gqa{inset-inline-end:0}.menu-flyout-anchor.placement-bottom.alignment-center.svelte-as1gqa,.menu-flyout-anchor.placement-top.alignment-center.svelte-as1gqa{inset-inline-start:50%;transform:translateX(-50%)}.menu-flyout-anchor.placement-left.alignment-start.svelte-as1gqa,.menu-flyout-anchor.placement-right.alignment-start.svelte-as1gqa{inset-block-start:0}.menu-flyout-anchor.placement-left.alignment-end.svelte-as1gqa,.menu-flyout-anchor.placement-right.alignment-end.svelte-as1gqa{inset-block-end:0}.menu-flyout-anchor.placement-left.alignment-center.svelte-as1gqa,.menu-flyout-anchor.placement-right.alignment-center.svelte-as1gqa{inset-block-start:50%;transform:translateY(-50%)}");
}

const get_flyout_slot_changes = dirty => ({});
const get_flyout_slot_context = ctx => ({});

// (68:1) {#if open}
function create_if_block(ctx) {
	let div0;
	let menuflyoutsurface;
	let updating_element;
	let div0_class_value;
	let arrowNavigation_action;
	let t;
	let div1;
	let current;
	let mounted;
	let dispose;
	const menuflyoutsurface_spread_levels = [/*$$restProps*/ ctx[14]];

	function menuflyoutsurface_element_binding(value) {
		/*menuflyoutsurface_element_binding*/ ctx[18](value);
	}

	let menuflyoutsurface_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < menuflyoutsurface_spread_levels.length; i += 1) {
		menuflyoutsurface_props = assign(menuflyoutsurface_props, menuflyoutsurface_spread_levels[i]);
	}

	if (/*menuElement*/ ctx[1] !== void 0) {
		menuflyoutsurface_props.element = /*menuElement*/ ctx[1];
	}

	menuflyoutsurface = new MenuFlyoutSurface({ props: menuflyoutsurface_props });
	binding_callbacks.push(() => bind(menuflyoutsurface, 'element', menuflyoutsurface_element_binding));
	/*menuflyoutsurface_binding*/ ctx[19](menuflyoutsurface);

	return {
		c() {
			div0 = element("div");
			create_component(menuflyoutsurface.$$.fragment);
			t = space();
			div1 = element("div");
			attr(div0, "id", /*menuId*/ ctx[10]);
			attr(div0, "class", div0_class_value = "menu-flyout-anchor placement-" + /*placement*/ ctx[5] + " alignment-" + /*alignment*/ ctx[6] + " svelte-as1gqa");
			set_style(div0, "--fds-menu-flyout-offset", /*offset*/ ctx[7] + "px");
			attr(div0, "tabindex", "-1");
			attr(div1, "class", "menu-flyout-backdrop svelte-as1gqa");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			mount_component(menuflyoutsurface, div0, null);
			/*div0_binding*/ ctx[20](div0);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			/*div1_binding*/ ctx[21](div1);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(arrowNavigation_action = arrowNavigation.call(null, div0, { preventTab: true })),
					listen(div0, "click", click_handler),
					listen(div1, "click", click_handler_1),
					listen(div1, "mousedown", /*closeFlyout*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const menuflyoutsurface_changes = (dirty & /*$$restProps*/ 16384)
			? get_spread_update(menuflyoutsurface_spread_levels, [get_spread_object(/*$$restProps*/ ctx[14])])
			: {};

			if (dirty & /*$$scope*/ 8388608) {
				menuflyoutsurface_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty & /*menuElement*/ 2) {
				updating_element = true;
				menuflyoutsurface_changes.element = /*menuElement*/ ctx[1];
				add_flush_callback(() => updating_element = false);
			}

			menuflyoutsurface.$set(menuflyoutsurface_changes);

			if (!current || dirty & /*placement, alignment*/ 96 && div0_class_value !== (div0_class_value = "menu-flyout-anchor placement-" + /*placement*/ ctx[5] + " alignment-" + /*alignment*/ ctx[6] + " svelte-as1gqa")) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty & /*offset*/ 128) {
				set_style(div0, "--fds-menu-flyout-offset", /*offset*/ ctx[7] + "px");
			}
		},
		i(local) {
			if (current) return;
			transition_in(menuflyoutsurface.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(menuflyoutsurface.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			/*menuflyoutsurface_binding*/ ctx[19](null);
			destroy_component(menuflyoutsurface);
			/*div0_binding*/ ctx[20](null);
			if (detaching) detach(t);
			if (detaching) detach(div1);
			/*div1_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (78:3) <MenuFlyoutSurface bind:element={menuElement} bind:this={menu} {...$$restProps}>
function create_default_slot(ctx) {
	let current;
	const flyout_slot_template = /*#slots*/ ctx[17].flyout;
	const flyout_slot = create_slot(flyout_slot_template, ctx, /*$$scope*/ ctx[23], get_flyout_slot_context);

	return {
		c() {
			if (flyout_slot) flyout_slot.c();
		},
		m(target, anchor) {
			if (flyout_slot) {
				flyout_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (flyout_slot) {
				if (flyout_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						flyout_slot,
						flyout_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(flyout_slot_template, /*$$scope*/ ctx[23], dirty, get_flyout_slot_changes),
						get_flyout_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(flyout_slot, local);
			current = true;
		},
		o(local) {
			transition_out(flyout_slot, local);
			current = false;
		},
		d(detaching) {
			if (flyout_slot) flyout_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);
	let if_block = /*open*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			attr(div, "class", div_class_value = "menu-flyout-wrapper " + /*className*/ ctx[8] + " svelte-as1gqa");
			attr(div, "aria-expanded", /*open*/ ctx[0]);
			attr(div, "aria-haspopup", /*open*/ ctx[0]);
			attr(div, "aria-controls", /*menuId*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding*/ ctx[22](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "keydown", /*handleEscapeKey*/ ctx[11]),
					listen(div, "click", /*toggleFlyout*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, null),
						null
					);
				}
			}

			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*className*/ 256 && div_class_value !== (div_class_value = "menu-flyout-wrapper " + /*className*/ ctx[8] + " svelte-as1gqa")) {
				attr(div, "class", div_class_value);
			}

			if (!current || dirty & /*open*/ 1) {
				attr(div, "aria-expanded", /*open*/ ctx[0]);
			}

			if (!current || dirty & /*open*/ 1) {
				attr(div, "aria-haspopup", /*open*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler = e => e.stopPropagation();
const click_handler_1 = e => e.stopPropagation();

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"open","closable","closeOnSelect","placement","alignment","offset","class","wrapperElement","anchorElement","menuElement","backdropElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { open = false } = $$props;
	let { closable = true } = $$props;
	let { closeOnSelect = true } = $$props;
	let { placement = "top" } = $$props;
	let { alignment = "center" } = $$props;
	let { offset = 4 } = $$props;
	let { class: className = "" } = $$props;
	let { wrapperElement = null } = $$props;
	let { anchorElement = null } = $$props;
	let { menuElement = null } = $$props;
	let { backdropElement = null } = $$props;
	const dispatch = createEventDispatcher();
	const menuId = uid("fds-menu-flyout-anchor-");
	let menu = null;
	let previousFocus = null;

	function handleEscapeKey({ key }) {
		if (key === "Escape" && closable) $$invalidate(0, open = false);

		previousFocus === null || previousFocus === void 0
		? void 0
		: previousFocus.focus();
	}

	function toggleFlyout() {
		previousFocus = document.activeElement;
		$$invalidate(0, open = !open);
	}

	function closeFlyout() {
		if (closable) $$invalidate(0, open = false);
	}

	setContext("closeFlyout", event => {
		dispatch("select");

		if (closeOnSelect && closable) {
			event.stopPropagation();
			$$invalidate(0, open = false);
		}
	});

	function menuflyoutsurface_element_binding(value) {
		menuElement = value;
		$$invalidate(1, menuElement);
	}

	function menuflyoutsurface_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menu = $$value;
			$$invalidate(9, menu);
		});
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchorElement = $$value;
			$$invalidate(3, anchorElement);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			backdropElement = $$value;
			$$invalidate(4, backdropElement);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrapperElement = $$value;
			$$invalidate(2, wrapperElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(14, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('closable' in $$new_props) $$invalidate(15, closable = $$new_props.closable);
		if ('closeOnSelect' in $$new_props) $$invalidate(16, closeOnSelect = $$new_props.closeOnSelect);
		if ('placement' in $$new_props) $$invalidate(5, placement = $$new_props.placement);
		if ('alignment' in $$new_props) $$invalidate(6, alignment = $$new_props.alignment);
		if ('offset' in $$new_props) $$invalidate(7, offset = $$new_props.offset);
		if ('class' in $$new_props) $$invalidate(8, className = $$new_props.class);
		if ('wrapperElement' in $$new_props) $$invalidate(2, wrapperElement = $$new_props.wrapperElement);
		if ('anchorElement' in $$new_props) $$invalidate(3, anchorElement = $$new_props.anchorElement);
		if ('menuElement' in $$new_props) $$invalidate(1, menuElement = $$new_props.menuElement);
		if ('backdropElement' in $$new_props) $$invalidate(4, backdropElement = $$new_props.backdropElement);
		if ('$$scope' in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			$: dispatch(open ? "open" : "close");
		}

		if ($$self.$$.dirty & /*menu, menuElement*/ 514) {
			$: if (menu && tabbable(menuElement).length > 0) tabbable(menuElement)[0].focus();
		}
	};

	return [
		open,
		menuElement,
		wrapperElement,
		anchorElement,
		backdropElement,
		placement,
		alignment,
		offset,
		className,
		menu,
		menuId,
		handleEscapeKey,
		toggleFlyout,
		closeFlyout,
		$$restProps,
		closable,
		closeOnSelect,
		slots,
		menuflyoutsurface_element_binding,
		menuflyoutsurface_binding,
		div0_binding,
		div1_binding,
		div_binding,
		$$scope
	];
}

class MenuFlyoutWrapper extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				open: 0,
				closable: 15,
				closeOnSelect: 16,
				placement: 5,
				alignment: 6,
				offset: 7,
				class: 8,
				wrapperElement: 2,
				anchorElement: 3,
				menuElement: 1,
				backdropElement: 4
			},
			add_css
		);
	}
}

export default MenuFlyoutWrapper;