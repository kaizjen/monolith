/* $svelte\fluent-svelte-raw\MenuBar\MenuBar.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append_styles,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { setContext } from "mth://.svelte/internal";
import { isTabbable } from "../tabbable";

function add_css(target) {
	append_styles(target, "svelte-7u58hw", ".menu-bar.svelte-7u58hw{align-items:center;block-size:40px;cursor:default;display:flex;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}");
}

function create_fragment(ctx) {
	let ul;
	let ul_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let ul_levels = [
		{
			class: ul_class_value = "menu-bar " + /*className*/ ctx[1]
		},
		{ role: "menubar" },
		/*$$restProps*/ ctx[2]
	];

	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element_1("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "svelte-7u58hw", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[5](ul);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				(!current || dirty & /*className*/ 2 && ul_class_value !== (ul_class_value = "menu-bar " + /*className*/ ctx[1])) && { class: ul_class_value },
				{ role: "menubar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(ul, "svelte-7u58hw", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[5](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;

	setContext("sideNavigation", (event, activeItem) => {
		const { key } = event;
		let tabOrder = [];

		for (const child of Array.from(element.children)) {
			if (isTabbable(child)) tabOrder.push(child);
		}

		const activeIndex = tabOrder.indexOf(activeItem);
		if (tabOrder.length < 0) return;
		if (key === "ArrowLeft" || key === "ArrowRight") event.preventDefault();

		if (key === "ArrowLeft") {
			if (tabOrder[0] === activeItem) {
				tabOrder[tabOrder.length - 1].focus();
			} else if (tabOrder.includes(activeItem)) {
				tabOrder[activeIndex - 1].focus();
			}
		} else if (key === "ArrowRight") {
			if (tabOrder[tabOrder.length - 1] === activeItem) {
				tabOrder[0].focus();
			} else if (tabOrder.includes(activeItem)) {
				tabOrder[activeIndex + 1].focus();
			}
		}
	});

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [element, className, $$restProps, $$scope, slots, ul_binding];
}

class MenuBar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { class: 1, element: 0 }, add_css);
	}
}

export default MenuBar;