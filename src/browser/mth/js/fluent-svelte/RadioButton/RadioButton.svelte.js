/* $svelte\fluent-svelte-raw\RadioButton\RadioButton.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base
} from "mth://.svelte/internal";

import { get_current_component } from "mth://.svelte/internal";
import { createEventForwarder } from "../internal";

function add_css(target) {
	append_styles(target, "svelte-hhkzib", ".radio-button.svelte-hhkzib.svelte-hhkzib{align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-clip:padding-box;background-color:var(--fds-control-alt-fill-secondary);block-size:20px;border:1px solid var(--fds-control-strong-stroke-default);border-radius:20px;display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:20px;justify-content:center;line-height:20px;margin:0;outline:none;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.radio-button.svelte-hhkzib.svelte-hhkzib:before{background-color:var(--fds-text-on-accent-primary);block-size:4px;border-radius:12px;content:\"\";inline-size:4px;position:absolute;visibility:hidden}.radio-button.svelte-hhkzib.svelte-hhkzib:focus-visible{box-shadow:var(--fds-focus-stroke)}.radio-button.svelte-hhkzib.svelte-hhkzib:hover{background-color:var(--fds-control-alt-fill-tertiary)}.radio-button.svelte-hhkzib.svelte-hhkzib:active{background-color:var(--fds-control-alt-fill-quarternary);border-color:var(--fds-control-strong-stroke-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:active:before{block-size:10px;inline-size:10px;transition:var(--fds-control-normal-duration) var(--fds-control-fast-out-slow-in-easing);visibility:visible}.radio-button.svelte-hhkzib.svelte-hhkzib:disabled{background-color:var(--fds-control-alt-fill-disabled);border-color:var(--fds-control-strong-stroke-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:disabled:before{visibility:hidden}.radio-button.svelte-hhkzib:disabled+span.svelte-hhkzib{color:var(--fds-text-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked{background-color:var(--fds-accent-default);border:none}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:before{block-size:12px;box-shadow:0 0 0 1px var(--fds-control-stroke-default);inline-size:12px;transition:var(--fds-control-normal-duration) var(--fds-control-fast-out-slow-in-easing);visibility:visible}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:hover{background-color:var(--fds-accent-secondary)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:hover:before{block-size:14px;inline-size:14px}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:active{background-color:var(--fds-accent-tertiary)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:active:before{block-size:10px;inline-size:10px}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:disabled{background-color:var(--fds-accent-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:disabled:before{block-size:12px;box-shadow:none;inline-size:12px}.radio-button-container.svelte-hhkzib.svelte-hhkzib{align-items:center;color:var(--fds-text-primary);display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;min-block-size:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.radio-button-container.svelte-hhkzib>span.svelte-hhkzib{-webkit-padding-start:8px;padding-inline-start:8px}");
}

// (49:1) {#if $$slots.default}
function create_if_block(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	return {
		c() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-hhkzib");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let label;
	let input;
	let input_class_value;
	let forwardEvents_action;
	let t;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "radio" },
		{
			class: input_class_value = "radio-button " + /*className*/ ctx[6]
		},
		{ __value: /*value*/ ctx[4] },
		{ checked: /*checked*/ ctx[3] },
		{ disabled: /*disabled*/ ctx[5] },
		/*$$restProps*/ ctx[8]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block = /*$$slots*/ ctx[9].default && create_if_block(ctx);

	return {
		c() {
			label = element("label");
			input = element("input");
			t = space();
			if (if_block) if_block.c();
			set_attributes(input, input_data);
			/*$$binding_groups*/ ctx[13][0].push(input);
			toggle_class(input, "svelte-hhkzib", true);
			attr(label, "class", "radio-button-container svelte-hhkzib");
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			if (input.autofocus) input.focus();
			input.checked = input.__value === /*group*/ ctx[0];
			/*input_binding*/ ctx[14](input);
			append(label, t);
			if (if_block) if_block.m(label, null);
			/*label_binding*/ ctx[15](label);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, input)),
					listen(input, "change", /*input_change_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "radio" },
				(!current || dirty & /*className*/ 64 && input_class_value !== (input_class_value = "radio-button " + /*className*/ ctx[6])) && { class: input_class_value },
				(!current || dirty & /*value*/ 16) && { __value: /*value*/ ctx[4] },
				(!current || dirty & /*checked*/ 8) && { checked: /*checked*/ ctx[3] },
				(!current || dirty & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			if (dirty & /*group*/ 1) {
				input.checked = input.__value === /*group*/ ctx[0];
			}

			toggle_class(input, "svelte-hhkzib", true);

			if (/*$$slots*/ ctx[9].default) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			/*$$binding_groups*/ ctx[13][0].splice(/*$$binding_groups*/ ctx[13][0].indexOf(input), 1);
			/*input_binding*/ ctx[14](null);
			if (if_block) if_block.d();
			/*label_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["group","checked","value","disabled","class","inputElement","containerElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { group = undefined } = $$props;
	let { checked = false } = $$props;
	let { value = undefined } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());
	const $$binding_groups = [[]];

	function input_change_handler() {
		group = this.__value;
		$$invalidate(0, group);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function label_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(2, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('group' in $$new_props) $$invalidate(0, group = $$new_props.group);
		if ('checked' in $$new_props) $$invalidate(3, checked = $$new_props.checked);
		if ('value' in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(6, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(2, containerElement = $$new_props.containerElement);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		group,
		inputElement,
		containerElement,
		checked,
		value,
		disabled,
		className,
		forwardEvents,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		input_change_handler,
		$$binding_groups,
		input_binding,
		label_binding
	];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				group: 0,
				checked: 3,
				value: 4,
				disabled: 5,
				class: 6,
				inputElement: 1,
				containerElement: 2
			},
			add_css
		);
	}
}

export default RadioButton;