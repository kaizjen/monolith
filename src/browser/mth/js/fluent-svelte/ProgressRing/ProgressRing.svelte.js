/* $svelte\fluent-svelte-raw\ProgressRing\ProgressRing.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	append_styles,
	assign,
	attr,
	binding_callbacks,
	compute_rest_props,
	detach,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_svg_attributes,
	svg_element,
	toggle_class
} from "mth://.svelte/internal";

import { createEventForwarder } from "../internal";
import { createEventDispatcher } from "mth://.svelte/internal";
import { get_current_component } from "mth://.svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-32f9k0", "@-webkit-keyframes svelte-32f9k0-progress-ring-indeterminate{0%{stroke-dasharray:.01px 43.97px;transform:rotate(0)}50%{stroke-dasharray:21.99px 21.99px;transform:rotate(450deg)}to{stroke-dasharray:.01px 43.97px;transform:rotate(3turn)}}@keyframes svelte-32f9k0-progress-ring-indeterminate{0%{stroke-dasharray:.01px 43.97px;transform:rotate(0)}50%{stroke-dasharray:21.99px 21.99px;transform:rotate(450deg)}to{stroke-dasharray:.01px 43.97px;transform:rotate(3turn)}}.progress-ring.svelte-32f9k0.svelte-32f9k0{min-block-size:16px;min-inline-size:16px;outline:none}.progress-ring.svelte-32f9k0 circle.svelte-32f9k0{fill:none;stroke:var(--fds-accent-default);stroke-width:1.5;stroke-linecap:round;stroke-dasharray:43.97;transform:rotate(-90deg);transform-origin:50% 50%;transition:all var(--fds-control-normal-duration) linear}.progress-ring.indeterminate.svelte-32f9k0 circle.svelte-32f9k0{-webkit-animation:svelte-32f9k0-progress-ring-indeterminate 2s linear infinite;animation:svelte-32f9k0-progress-ring-indeterminate 2s linear infinite}");
}

function create_fragment(ctx) {
	let svg;
	let circle;
	let circle_stroke_dashoffset_value;
	let svg_class_value;
	let svg_role_value;
	let svg_aria_valuemin_value;
	let svg_aria_valuemax_value;
	let forwardEvents_action;
	let mounted;
	let dispose;

	let svg_levels = [
		{ tabindex: "-1" },
		{
			class: svg_class_value = "progress-ring " + /*className*/ ctx[4]
		},
		{ width: /*size*/ ctx[3] },
		{ height: /*size*/ ctx[3] },
		{ viewBox: "0 0 16 16" },
		{
			role: svg_role_value = /*value*/ ctx[0] ? "progressbar" : "status"
		},
		{
			"aria-valuemin": svg_aria_valuemin_value = !/*indeterminate*/ ctx[6] ? 0 : undefined
		},
		{
			"aria-valuemax": svg_aria_valuemax_value = !/*indeterminate*/ ctx[6] ? 100 : undefined
		},
		{ "aria-valuenow": /*value*/ ctx[0] },
		/*$$restProps*/ ctx[8]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", "7");
			attr(circle, "stroke-dasharray", "3");
			attr(circle, "stroke-dashoffset", circle_stroke_dashoffset_value = (100 - /*value*/ ctx[0]) / 100 * /*circumference*/ ctx[5]);
			attr(circle, "class", "svelte-32f9k0");
			set_svg_attributes(svg, svg_data);
			toggle_class(svg, "indeterminate", /*indeterminate*/ ctx[6]);
			toggle_class(svg, "svelte-32f9k0", true);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle);
			/*circle_binding*/ ctx[9](circle);
			/*svg_binding*/ ctx[10](svg);

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, svg));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*value, circumference*/ 33 && circle_stroke_dashoffset_value !== (circle_stroke_dashoffset_value = (100 - /*value*/ ctx[0]) / 100 * /*circumference*/ ctx[5])) {
				attr(circle, "stroke-dashoffset", circle_stroke_dashoffset_value);
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ tabindex: "-1" },
				dirty & /*className*/ 16 && svg_class_value !== (svg_class_value = "progress-ring " + /*className*/ ctx[4]) && { class: svg_class_value },
				dirty & /*size*/ 8 && { width: /*size*/ ctx[3] },
				dirty & /*size*/ 8 && { height: /*size*/ ctx[3] },
				{ viewBox: "0 0 16 16" },
				dirty & /*value*/ 1 && svg_role_value !== (svg_role_value = /*value*/ ctx[0] ? "progressbar" : "status") && { role: svg_role_value },
				dirty & /*indeterminate*/ 64 && svg_aria_valuemin_value !== (svg_aria_valuemin_value = !/*indeterminate*/ ctx[6] ? 0 : undefined) && { "aria-valuemin": svg_aria_valuemin_value },
				dirty & /*indeterminate*/ 64 && svg_aria_valuemax_value !== (svg_aria_valuemax_value = !/*indeterminate*/ ctx[6] ? 100 : undefined) && { "aria-valuemax": svg_aria_valuemax_value },
				dirty & /*value*/ 1 && { "aria-valuenow": /*value*/ ctx[0] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(svg, "indeterminate", /*indeterminate*/ ctx[6]);
			toggle_class(svg, "svelte-32f9k0", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			/*circle_binding*/ ctx[9](null);
			/*svg_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let indeterminate;
	const omit_props_names = ["value","size","class","element","circleElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = undefined } = $$props;
	let { size = 32 } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { circleElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component(), ["change"]);
	const dispatch = createEventDispatcher();
	let circumference;

	function circle_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			circleElement = $$value;
			$$invalidate(1, circleElement);
		});
	}

	function svg_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(2, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(2, element = $$new_props.element);
		if ('circleElement' in $$new_props) $$invalidate(1, circleElement = $$new_props.circleElement);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$: if (value < 0) {
				$$invalidate(0, value = 0);
			} else if (value > 100) {
				$$invalidate(0, value = 100);
			}
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			$: $$invalidate(6, indeterminate = typeof value === "undefined" || value === null || Number.isNaN(value));
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			$: dispatch("change", value);
		}

		if ($$self.$$.dirty & /*circleElement*/ 2) {
			$: if (circleElement) $$invalidate(5, circumference = Math.PI * (circleElement.r.baseVal.value * 2));
		}
	};

	return [
		value,
		circleElement,
		element,
		size,
		className,
		circumference,
		indeterminate,
		forwardEvents,
		$$restProps,
		circle_binding,
		svg_binding
	];
}

class ProgressRing extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				value: 0,
				size: 3,
				class: 4,
				element: 2,
				circleElement: 1
			},
			add_css
		);
	}
}

export default ProgressRing;